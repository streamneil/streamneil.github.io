<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JWT结合Redis实现授权认证方案</title>
    <url>/2019/12/09/jwt-redis-auth/</url>
    <content><![CDATA[<h2 id="JWT原理"><a href="#JWT原理" class="headerlink" title="JWT原理"></a>JWT原理</h2><p>JWT我们都很清楚了，在实战中不止一次使用。其原理简单描述就是：认证服务器吧一串json加密之后返回给应用，就像这样：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="string">"230012"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"neilli"</span>,</span><br><span class="line">  <span class="attr">"exprie_data"</span>: <span class="number">1516239022</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加密之后：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjIzMDAxMiIsIm5hbWUiOiJuZWlsbGkiLCJleHByaWVfZGF0YSI6MTUxNjIzOTAyMn0.WXgPJeoK89bzR1gWPVRe_mAz91TOzMqVMcv4wAbulew</span><br></pre></td></tr></table></figure></p>
<p>应用获取加密后数据之后，再次请求服务的生活带上上述加密的字符串即可。服务端根据秘钥去获取用户认证的身份。这样服务端就不需要保持<code>session</code>了，也就是说服务的变成了无状态的了，从而比较容易实现扩展；</p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>JWT之所以是无状态的，就是其用户身份只根据上面的秘钥来确定，也就是一旦<code>令牌</code>签发，则其就不受服务端控制，其消亡只能根据<code>令牌</code>本身的过期时间来控制，这样对于有一些实时性要求的系统来说是不可行的。</p>
<h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><blockquote>
<p>要解决上述的问题，本身有很多方案，下面就简单实用redis来说明解决方案。</p>
</blockquote>
<p><img src="j-r-a.png" alt=""></p>
<ol>
<li>授权服务器接收到应用请求，去用户表获取授权信息；</li>
<li>根据业务，生成jwt换成到redis，并返回redis 换的key（32或64位）；</li>
<li>应用获取access_token缓存起来，再次请求时带上access_token；</li>
<li>网关接受到access_token，去redis获取jwt并校验；</li>
<li>网关之后的服务直接鉴权都实用jwt；</li>
<li>如果需要实时清楚jwt，则在网关处去校验授权是否合法，清楚redis即可；</li>
</ol>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>JWT</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>弄懂SpringBoot中过滤器、拦截器、监听器</title>
    <url>/2019/11/26/filter-interceptor/</url>
    <content><![CDATA[<blockquote>
<p>对开始刚玩SpringBoot的同学来说光这个几个概念就够理解的了~ 更别说其原理、区别以及使用了，我也是在具体用到的时候才发现确实有点绕，在后面开发的时候肯定少不了和其打交道，所以，在此总结下。</p>
</blockquote>
<h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p><code>监听器 &gt; 过滤器 &gt; 拦截器</code></p>
<h2 id="它们是怎么使用的？"><a href="#它们是怎么使用的？" class="headerlink" title="它们是怎么使用的？"></a>它们是怎么使用的？</h2><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p><strong>实现方式：</strong></p>
<ol>
<li>[建议]实现<code>HandlerInterceptor</code>接口；</li>
<li>继承<code>abstract HandlerInterceptorAdapter</code>;</li>
</ol>
<p><strong>具体方法(HandlerInterceptor)：</strong></p>
<ol>
<li>preHandle()</li>
<li>postHandle()</li>
<li>afterCompletion()</li>
</ol>
<blockquote>
<p>按单词意思即可理解其意，preHandle() 返回<code>true</code>才会往下走；</p>
</blockquote>
<p><strong>如何用Interceptor来实现部分请求无需登录校验？</strong></p>
<blockquote>
<p>用<code>filter</code>可以添加无需登录校验的<code>api</code>，但，我们也可以用<code>Interceptor</code> + <code>注解</code>的形式，来<br>自定义一个<code>@AnonymousAllow</code>的注解，来拦截网络请求，判断其是否需要登录校验，这样做是不是另外一种思路？具体如下：</p>
</blockquote>
<h4 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AnonymousAllow &#123;</span><br><span class="line">    <span class="comment">// 接口允许匿名访问</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">anonymousAllow</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="实现AuthorizationInterceptor"><a href="#实现AuthorizationInterceptor" class="headerlink" title="实现AuthorizationInterceptor"></a>实现AuthorizationInterceptor</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        AnonymousAllow anonymousAllow = handlerMethod.getMethod().getAnnotation(AnonymousAllow.class);</span><br><span class="line">        <span class="keyword">if</span> (anonymousAllow != <span class="keyword">null</span> &amp;&amp; anonymousAllow.anonymousAllow()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String authorization = request.getHeader(AuthConstants.AUTHORIZATION);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(authorization)) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            log.error(<span class="string">"AuthorizationInterceptor preHandle SC_UNAUTHORIZED: Null"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtil.verifyToken(authorization);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"AuthorizationInterceptor preHandle verifyToken Error: "</span> + e.getMessage());</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AnonymousAllow</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserResponse <span class="title">login</span><span class="params">(@Valid @RequestBody LoginForm form)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>像上面一样，只要在具体不需要登录校验的接口处添加<code>@AnonymousAllow</code>注解即可；</p>
</blockquote>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><h4 id="以zuul网关来举例，具体如下："><a href="#以zuul网关来举例，具体如下：" class="headerlink" title="以zuul网关来举例，具体如下："></a>以<code>zuul</code>网关来举例，具体如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FilterType.PRE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        log.info(<span class="string">"AuthorizationFilter zuul filter"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="以SpringCloud-gateway为例，具体如下："><a href="#以SpringCloud-gateway为例，具体如下：" class="headerlink" title="以SpringCloud gateway为例，具体如下："></a>以<code>SpringCloud gateway</code>为例，具体如下：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UnAuthCheckConfig unAuthCheckConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jwt.secret:xz-jwt-test&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        String path = exchange.getRequest().getURI().getPath();</span><br><span class="line">        log.info(<span class="string">"AuthFilter path:"</span> + path);</span><br><span class="line">        <span class="comment">// 放掉不需要authcheck的路由</span></span><br><span class="line">        <span class="keyword">if</span> (unAuthCheckConfig.getUnAuthRequestList().contains(path)) &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String authorization = exchange.getRequest().getHeaders().getFirst(AuthConstants.AUTHORIZATION);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(authorization)) &#123;</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtil.verifyToken(authorization, secret);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">"Jwt verifyToken Error: "</span> + e.getMessage());</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><h4 id="仅以HttpSessionListener为例，实现如下："><a href="#仅以HttpSessionListener为例，实现如下：" class="headerlink" title="仅以HttpSessionListener为例，实现如下："></a>仅以<code>HttpSessionListener</code>为例，实现如下：</h4><blockquote>
<p>监听网址实时在线人数，比如当前登录此博客有多少人，兼容<code>session</code>过期时间为30min，这个是如何实现的呢（方案不止一种）。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineSessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建~ 统计 + 1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 销毁~ 统计 - 1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>把此监听器加入到<code>spring容器</code>中，即可实现对<code>session</code>的监听；</p>
</blockquote>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>经过上面的几种简单的实现，我们应该对其有个基本的了解了~再回过头看下之前给出的他们的执行顺序：<code>监听器 &gt; 过滤器 &gt; 拦截器</code>，为何是这样的？</p>
<p>经过上面的实现，我们看到<code>拦截器</code>是必须依赖<code>SpringMVC控件</code>(<code>WebMvcConfigurer</code>)，而且其必须作用在<code>servlet</code>里面，因为其对<code>controller</code>进行拦截；</p>
<p>而<code>拦截器</code>是针对<code>request（response）</code>进行拦截，依赖<code>servlet容器</code>；</p>
<p><code>监听器</code>是<code>servlet中特殊的类</code>，能帮助我们监听web中特定的事件，比如：请求域、session、applicaiton；</p>
<p>综上：</p>
<ol>
<li>过滤器(filter)依赖servlet容器，只能在servlet容器(web)下使用；</li>
<li>拦截器(interceptor)依赖springMVC框架，是在spring框架下使用，不局限web环境；</li>
<li>监听器(springboot使用的)，只能在web下使用；</li>
<li>filter实现<code>dofilter</code>回调（所以，必须在servlet容器才能回调过来）；</li>
<li>interceptor是基于反射，所以，和servlet无关；</li>
<li>interceptor只能对controller请求进行过滤，action之前开始，action结束则intercepor结束；</li>
<li>filter不仅能过滤请求，还能对静态资源进行保护和过滤；</li>
<li>interceptor能访问action的上下文（例中获取注解）；</li>
<li>interceptor可以在controller一个生命周期内被多次调用（只能针对controller）;</li>
<li>filter在容器初始化的时候只会被执行一次；</li>
</ol>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol>
<li>filter可以过滤任何请求，但是只能被执行一次；</li>
<li>interceptor可以多次执行，但是只能针对controller；</li>
<li>listener是针对整个应用特殊事件进行监听；</li>
</ol>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SpringCloud</tag>
        <tag>Filter</tag>
        <tag>Interceptor</tag>
      </tags>
  </entry>
  <entry>
    <title>自己的能量场</title>
    <url>/2019/11/25/zhixingli-1/</url>
    <content><![CDATA[<h1 id="自己的能量场"><a href="#自己的能量场" class="headerlink" title="自己的能量场"></a>自己的能量场</h1><p>最近一段时间最深刻的是<code>改变</code>，如何改变?<br>说的太多的：通过学习，不断地去深刻反思、勇敢地去暴露自己问题并去改变它。有时会问自己：『我改变了，有用吗？』答案是：不知道。但是你知道的是：你成长的是你自己。不要在乎其他人的眼光了。但是这样够吗？</p>
<p>『兵熊熊一个，将熊熊一窝』如果自己不能真实的改变，自己对自己得过且过，自己原地踏步，指望下属来成就自己，这样的荣誉我绝不要。因为，我听过太多的说教：”你要找准你在团队中的定位…”，我自己也是这样去说教自己的团队的。我自认为我是一个比较注重目标执行以及自觉性相对还可以的一个人，自己也认为自己的定位自己也相对清晰，但是恰恰就是这样的一个我，是<code>灯下黑</code>。以现在的心情去回想过去自己的定位，之前的简直就是仅存留在纸上，没能真正印证到自己心里和实际工作中去，只是概念意义，不管你多么努力去学习的很多东西，没有产生结果，或仅仅对你产生了一点结果，但还是改变不了<code>大环境</code></p>
<p>这几天我在想身处现在职位，我的职责是什么？这个看似很简单的道理，恰恰是我之前没能深刻去反思的一个问题。如果说这一段时间的学习最深刻的有：<code>改变</code>、<code>结果</code>、<code>沟通</code>、<code>100%责任(责任稀释)</code>、<code>执行</code>… 即使这段时间的英才课程宣传的是<code>体验式教学</code>，其实仔细想下，何尝不是另外一种方式来强制灌注你要牢记这些<code>知识点</code>呢。这些都是课程’灌输’给我的，除此之外，我自己在此去感悟到的是什么？</p>
<p>我想我应该更清晰第明确了自己的目标了。自己要做到时刻保持强大的能量场，时刻对自己高要求，无论是工作和生活如果遇到了困难、挫折和压力应该以此为动力，去借力成长起来，而不是像之前<code>一蹶不振</code>好一阵子，其实你这样的话，你的下属是能看到的。这不是一个优秀领导者所为；</p>
<p>我想我应该彻底改变了自己的心态了。不再是自我感觉良好，明白自己和优秀的人还是有很大的差距，但是庆幸的是我知道了我和优秀的人有差距；</p>
<p>还有就是，我应该明白了自己应该要去做什么，要去营造一个怎么样的氛围，也明确了自己的责任。<strong>你的偷懒是对他人的很不负责任</strong>。之前好几个小伙伴的学习结果，由于我的监督力度不够，导致他们学习成功很不理想，对此深感自责。我希望的这样的一氛围不仅仅是自己小团队，之前感觉公司的氛围和文化离我很遥远，其实就在自己周围，自己也要已更大的能量去投入这方面的推进上，因为皮之不存毛将焉附，大环境有问题，小团队氛围再好有毛用！！！所以，当发现什么是对的，什么是错的都要敢于去讲出来，不会在乎在顾及那么多，对自己和他人的都不负责任。</p>
<p><strong>最重要的是，我清晰的知道对我自己的改变和成长，我应该去做什么、怎么去做，可能很艰难，但是记住自己是有强大能量的，剩下的就去执行吧！！！</strong></p>
]]></content>
      <tags>
        <tag>管理</tag>
        <tag>领导力</tag>
      </tags>
  </entry>
</search>
