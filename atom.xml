<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Neil</title>
  
  <subtitle>忙碌且懂得感恩的人，运气不会太差 ◑０◐</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://neilli.cn/"/>
  <updated>2021-08-17T02:39:12.839Z</updated>
  <id>https://neilli.cn/</id>
  
  <author>
    <name>stream.neil@gmail.com</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【小程序-货车记】从原型到上线</title>
    <link href="https://neilli.cn/2021/08/11/weapp-hcj/"/>
    <id>https://neilli.cn/2021/08/11/weapp-hcj/</id>
    <published>2021-08-11T15:51:50.000Z</published>
    <updated>2021-08-17T02:39:12.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前端时间和我弟聊天，他现在有几辆货车每天都要发货，现在是用账本记账，到了月底统计很麻烦，有时还会丢账。如果再让其他车辆发货，总共10到15辆车，记账就更复杂，每天小账本密密麻麻，还经常担心把账本弄丢了。</p><p>弄明白背景，就好办了。</p><h2 id="交互原型设计"><a href="#交互原型设计" class="headerlink" title="交互原型设计"></a>交互原型设计</h2><p><a href="https://q885vc.axshare.com/#id=v06qpp&amp;p=%E6%98%8E%E7%BB%86%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">交互原型</a></p><p>大概花了2天时间。</p><h2 id="已上线小程序"><a href="#已上线小程序" class="headerlink" title="已上线小程序"></a>已上线小程序</h2><p>先看成品吧</p><h2 id><a href="#" class="headerlink" title></a><img src="gh_b548024de613_430.jpg" alt></h2><p><strong>预览</strong><br><img src="1.jpeg" alt><br><img src="2.jpeg" alt><br><img src="3.jpeg" alt><br><img src="4.jpeg" alt></p><p>小程序之前开发过，这次捡起来速度快一点。不过，我对UI细节要求非常高，在最后打磨细节上画了点时间。其他的还好。</p><p>目前小程序是挂载到公司已认证的公众号下面。算是嫖了下公司吧（50个免费小程序名额才用了2个），后期可以迁走。</p><h2 id="运行成本"><a href="#运行成本" class="headerlink" title="运行成本"></a>运行成本</h2><p>服务端目前用户量非常少，纯数字，比较少。</p><h2 id="后期规划"><a href="#后期规划" class="headerlink" title="后期规划"></a>后期规划</h2><p>看使用的人数，再加入其它的货源或车源的UGC模块。</p>]]></content>
    
    <summary type="html">
    
      在家隔离 14+7 天，有大把的时间正好系统的玩下小程序，决心把小程序撸上线。
    
    </summary>
    
    
      <category term="小程序" scheme="https://neilli.cn/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://neilli.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>【产品学习】一个完整闭环的产品原型设计</title>
    <link href="https://neilli.cn/2021/05/05/chanp-pr-demo/"/>
    <id>https://neilli.cn/2021/05/05/chanp-pr-demo/</id>
    <published>2021-05-05T07:28:00.000Z</published>
    <updated>2021-05-24T01:43:36.884Z</updated>
    
    <content type="html"><![CDATA[<p>做研发10年了。给自己换个 title 。哈哈哈</p><p>从15年开始起，那时候开始接触产品，后来带过产品团队，更多的只是从产品和业务的全局去思考，未能真正意义上细致入微般深入闭环和测试一个场景。</p><p>1个月时间，计划每天完成2~3h，从下载 axure9 学习到把 PC 端和 手机端所有的交互原型完成，真实还原一个轻量级的知识付费 SaaS 应用。</p><p><a href="https://63vtzi.axshare.com/#id=405qyf&amp;p=%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95&amp;c=1" target="_blank" rel="noopener">PC端PR</a></p><blockquote><p>建议：MacBook PRo 15-inch 全屏 Chrome 100% 缩放</p></blockquote><p><a href="https://dmyuw0.axshare.com" target="_blank" rel="noopener">手机端PR</a></p><blockquote><p>建议：MacBook PRo 15-inch 全屏 Chrome 80% 缩放</p></blockquote><p>首次加载缓慢，请耐心等待。</p>]]></content>
    
    <summary type="html">
    
      正式转行做产品经理了
    
    </summary>
    
    
      <category term="产品" scheme="https://neilli.cn/categories/%E4%BA%A7%E5%93%81/"/>
    
    
      <category term="产品" scheme="https://neilli.cn/tags/%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>做一名高级管理者的思考</title>
    <link href="https://neilli.cn/2021/04/16/junior-leader-and-advanced-leader/"/>
    <id>https://neilli.cn/2021/04/16/junior-leader-and-advanced-leader/</id>
    <published>2021-04-16T12:30:40.000Z</published>
    <updated>2021-04-16T12:37:03.681Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间事情是有点多，不过很庆幸这段时间忙碌的对团队的年度 OKR 推进是有很大的帮助，但是对个人季度 OKR 的推进效果欠佳。</p><p>好久没更新了，好像没有深入思考和总结下目前。每周能抽出2-3h的整块的时间，深入思考和总结下自我，这种感觉其实蛮好的，只是不是每周都能挤出和有自制力坚持下来。</p><p>好了，不废话了，回到主题。</p><p>前面提到，最近事情是比较多，但是还好是依 OKR 为主，比较有成就感。上周和领导也深入聊了一次，主要是基于当前时间比较重要也比较多，有些节奏上的推进可能有问题，就沟通讨论2h+，回去之后思考总结下，感觉还是蛮有收获的。</p><p><strong>事情是做不完的。</strong> 我们要有个这样的基本认知，那作为一个管理者，你应该对待你经常很忙碌这种情况呢。</p><p>回顾自己那么多年的管理，自己从主管、经理、总监，到现在中台部负责人，做的事情不同、目标不同、管理的人的职责不同、语言不同、人数也不同，我对自己从毕业到现在的经历分为几个阶段（今年是自己毕业第10年了）：</p><ul><li>1 - 5 年<ul><li>1 - 3 年，一门语言的深入</li><li>3 - 5 年，管理的入门，救火先锋</li></ul></li><li>5 - 10 年<ul><li>5 - 8 年，提高自己管理的效率，执行力、事情推进效率</li><li>8 - 至今，这1~2年，我慢慢的注重推进事情的价值，效率不是我第一<br>注的，已经深入的日程工作的思维当中了</li></ul></li></ul><p>我自己从一个解决效率的管理者，成长为一个注意解决价值问题的管理者了。往往注重解决价值的管理者，对效率也是非常看重，因为他看到了效率的价值，而不是单纯的为了领导要求的效率而提高效率。</p><p>可能你会说，我现在公司不要求对我的工作做过多的思考，只要执行就行了，至于价不价值和我没关系。其实这也是对的。每个管理者都有自己的定位，可能你目前的定位就是偏执行要效率的岗位，很庆幸，我现在的岗位是不允许我纯接受别人的工作，单纯执行。我要更多的参与过程和目标的制定，甚至是方向。所以，可见，解决价值问题是多么重要了，因为你的时间就在那里，不多不少、你的资源就在那里，不多不少，所以就要求你必须去思考价值问题。</p><p>很庆幸和领导有那次深聊，要不然，可能我不会往那方面去思考和总结。</p><p>所以，我这段很长一段时间，是如何做的呢。</p><h2 id="1-阶段性的保持自己专注"><a href="#1-阶段性的保持自己专注" class="headerlink" title="1. 阶段性的保持自己专注"></a>1. 阶段性的保持自己专注</h2><p>作为部门领导，经常会被各种事情、各种人来找，还要被莫名拉取开一些莫名的会议，自己的计划和待办的事情，每周都有 delay，然后我们安慰自己：计划赶不上变化。然后日复一日、周复一周、每月如此… 持续好几年。所以，在前几年，我甚至很享受这样的感觉，以为我感觉我时刻会被别人需要、对别人有价值… 殊不知，自己不知不觉掉进了一个陷阱：看似有成就的感的状态，其实你自己没有你自己的目标，没有你自己打车目标的成就感。有的只是按公司或领导的目标推进过程中，为团队和别人解决问题的而带来的成就感。甚至没有一项是自己深入思考这是有价值的，自己主动为之奋斗或为自己成长定下的目标。</p><p>所以，没过一段时间，如果我出现了上面的情况，我就会提醒自己，这很危险，不能时刻让自己很忙碌。是你自己要忙碌的吗？是你月度目标、4R、OKR吗？你距离这些还差哪些？感觉梳理下… 当你真的把目标放在心上，努力的去往目标去做，做成之后的成就感就会体现，所以，工作方面，我从去年就开始从月度目标上就找自己的成就感。</p><h2 id="2-管理自己的时间"><a href="#2-管理自己的时间" class="headerlink" title="2. 管理自己的时间"></a>2. 管理自己的时间</h2><p>学会管理自己的时间其实很重要，前面也讲了，作为部门领导，你的时间其实不是你自己的，你的时间时领导的、团队的、其他团队的，剩下的才是你的。那么多人来分你工作的8小时，咋分啊，其实很重要。你思考的就是目标、4R、OKR。所以，你要学会向上管理，把领导分你的时间变成领导和你一起完成你的4R和OKR… 团队也是如此… 我相信如果你的领导是位很优秀的领导，他很开心你能有思考、对目标和价值有权衡，而不是单纯的做一个听话的下属、不懂思考。你对你下属的要求肯定也是如此。</p><h2 id="3-注重培养团队接班人"><a href="#3-注重培养团队接班人" class="headerlink" title="3. 注重培养团队接班人"></a>3. 注重培养团队接班人</h2><p>在前面 <a href="https://www.neilli.cn/2020/09/28/guanli-how-to-corer/" target="_blank" rel="noopener">团队管理-你团队有核心人才吗？</a> 中提到如何进行人才培养，培养接班人，其实是解脱自己很好的方式，对自己有利、对公司更有利，从公司角度来讲，一个优秀的领导只要要能为公司培养出至少2名像自己一样的人才。哈哈，这样公司是不是很开心。如果你足够优秀，你在公司几年，公司出来2个和一样吊的人。这个时候可能好多初级领导会想：培养出他，他会替代我吗？我可以告诉你，你如果有此担心，那估计你会被替代。如果你完全不担心，那肯定不会被替代。这其实也是好多人的固有思维：教会徒弟，饿死师傅。</p><h2 id="4-注重产品型研发团队建设，做目标聚焦"><a href="#4-注重产品型研发团队建设，做目标聚焦" class="headerlink" title="4. 注重产品型研发团队建设，做目标聚焦"></a>4. 注重产品型研发团队建设，做目标聚焦</h2><p>从在云计算器，我就开始意识到把团队往产品型去做，目标才能做很大的聚焦，才能发挥团队更大的效率，从而解决更大价值问题。</p><p>项目型团队，大家都在为目标而奔跑，没有人为这个需求的价值去思考，大家都没有产品意识和思维。我承认，可能现在团队的产品氛围还是不够啊。但是，我经常和无形这种对来部门的项目、需求，都会转成产品，我们面向产品开发，最终输出的时产品，极大的发挥其价值，而不是单纯的需求和项目。</p><p>总结下，我感觉我进阶了，回顾这些年自己思维上的一些变化，自己不单纯是一个只注重效率的执行者领导了，已经系统的变成对产品和价值有极高追求的管理者。因为，我已经发现我自己对效率的追求不再像之前那样疯狂，但是对产品及其价值变的更加看重，甚至思维上无所不用其极。</p><p>希望上述对你面对你工作的时候，起到一定引导作用。</p><p>2021.04.16 21:40 周五 逼自己总结复盘一稿</p>]]></content>
    
    <summary type="html">
    
      好久没有写东西，这段时间事情堆积的太多。今天周五无论如何也要写一篇东西，记录下自己的思考的过程和结果。
    
    </summary>
    
    
      <category term="管理" scheme="https://neilli.cn/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="管理" scheme="https://neilli.cn/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>世界上唯一不变的就是变化本身</title>
    <link href="https://neilli.cn/2021/03/29/how-to-change/"/>
    <id>https://neilli.cn/2021/03/29/how-to-change/</id>
    <published>2021-03-29T14:42:40.000Z</published>
    <updated>2021-04-09T08:15:48.795Z</updated>
    
    <content type="html"><![CDATA[<p>HR 小姐姐找到我，第 10 期厚记马上要发布了，要我帮忙些个卷首语，主题是：变化。她感觉我非常适合这个主题，我欣然接受了。下班后到10点，3到4个小时吧，把自己思路、大纲整理，写了1000多字，修改3遍，精简到如此，记录如下：</p><p>正文：</p><p>「世界上唯一不变的就是变化本身」。这句名言来源于希腊哲学家赫拉-克利特。他深信世界上的一切事物都是在持续的变化中。我们当下身处的环境，无时无刻不再印证着这个观点。</p><p>移动互联网，又无疑像一剂催化剂，加速了我们所处的这个行业变化的速度和频率。</p><p>也有的像诺基亚一样（“我们并没有做错什么，但不知为什么，我们输了。” ）。是的，当我们追求稳定不变的同时，其实我们正在被慢慢改变的环境所淘汰，只是我们现在还没发现而已，不过等你有所察觉，为时已晚。</p><p>在 VUCA 时代的今天，无论是企业还是个人都面对着同样的挑战。不愿意拥抱变化、不主动提高自己应变能力，下次”疫情”时，谁知道情况会怎样。只有不断的提升自己的核心竞争力、主动去探索未知、主动去面对不确定性，你才会发现原来「车到山前必有路」这句话是真的。</p><p>我是2012年来厚建。记得前几年，公司每年都会做一次组织架构调整。每次调整都伴随着人员的增多，从二三十人到五六十人，再到一百多人，到现在的二三百人；业务也是从数十家客户做到二三百家；公司从软件到云计算；产品从livCMS到M2O，再到M2o+、短书、爱秀… 公司一直在快速的变化着，也是在那个时候公司明确出 H O G E：How To Change? 的 slogan。</p><p>「如何变？」「如何改变？」无时无刻不再提醒着厚建应该主动去寻求改变。当然，在前进的过程中，我们也走过弯路，但是，主动探索、寻求改变的决心已经深深印在每个厚建人的心底。估计正因如此才使得在当今互联网公司平均寿命只有三到五年的今天，厚建能稳定发展十七年，我们相信，她还将继续焕发新的活力，走出新的篇章。</p><p>– 厚记 NO.10 卷首语</p>]]></content>
    
    <summary type="html">
    
      车道山前必有路，说起来轻松。
    
    </summary>
    
    
      <category term="认知" scheme="https://neilli.cn/categories/%E8%AE%A4%E7%9F%A5/"/>
    
    
      <category term="认知" scheme="https://neilli.cn/tags/%E8%AE%A4%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>团队出了生产事故，该不该罚钱或严重问责。</title>
    <link href="https://neilli.cn/2021/03/23/thinking-in-prod-acc/"/>
    <id>https://neilli.cn/2021/03/23/thinking-in-prod-acc/</id>
    <published>2021-03-23T10:55:50.000Z</published>
    <updated>2021-03-27T02:07:02.127Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们团队出现了一次生产事故，严重影响客户满意度。但是，没有罚钱，被要求书面深刻检讨。</p><p>在此之前，我们团队的小伙伴临时替运营研发部门维护一场抽奖活动，由于周5双方都对服务器进行部署、升级等，最终导致了抽奖出现问题，这次我们组小伙伴被罚钱了，我和我们CTO都被罚钱了。</p><p>从那时起，我就在思考公司这项制度。<code>研发出了生产事故，就应该被罚钱吗？</code></p><p>其实，我相信很多公司都会这样做？有奖有惩嘛。不然光有绩效奖励，出了事故没有人负责，那咋成啊。开始我也是这么认为的，三国中，将军败仗要被砍头问罪的，所以罚钱算啥。你负责的事情，出了事故，你就是不够认真、负责，导致事故发生，造成严重影响，就该被罚钱。</p><p>但是，抽奖活动结束后，小伙伴找到我，问：何时把事情交接出去啊？下周又有活动了。 我一听，明显的是感觉出我们小伙伴是感觉，这不是他的事情，是临时安排或主动要求顶替负责的，出了事故却要罚钱… 我情愿少干一点，也不要担此风险。”多做多错，少做少错”嘛。</p><h2 id="思考问题本质"><a href="#思考问题本质" class="headerlink" title="思考问题本质"></a>思考问题本质</h2><p>罚钱或者严重书面检讨的目的或初衷，是为了让大家引擎对问题的重视，保证不会再重复犯错或降低犯错次数，公司肯定不会为了罚钱增收或恶心大家。</p><p>罚钱确实能让大家引起对问题的重视。一旦全员通报，大家都会知道，你看，生产事故要被罚钱。要注意。但是，问题解决了吗？或者说保证了问题不会重复犯或减少犯了吗？好像没有很系统或专业的去做、去引导大家如何做，也没有从本质解决问题。</p><p>试问我自己：<br>如果换成是我是负责，能保证100%不会有问题吗？<br>“当然不能！”<br>那我对待工作不够认真？不够负责？不够重视？我没有责任心？<br>“那肯定也不是啊。”</p><p><strong>所以，生产环境出了问题和员工的责任心和重视度无关。</strong></p><p>那你说咋整？</p><p>出了生产事故，公司一味的去罚钱或严重的书面全员检讨，无意于从根本上解决问题，也是一种管理上懒惰的表现。</p><p><strong>员工的一切的问题，都是管理的问题。</strong></p><p>所以，此问题的本质是要求管理者要能从根本上、体系化解决此问题。当然，如果罚钱和全员检讨能解决也行啊。</p><p>认清了此问题的本质，那就好办了。</p><h2 id="团队氛围"><a href="#团队氛围" class="headerlink" title="团队氛围"></a>团队氛围</h2><p>我一直试图营造的团队氛围是：自驱、协同、成长型。鼓励大家主动担当，不要只关注自己的一亩三分地；公司价值观也是主动担当。如果罚钱、严重问责，大家无形之中就会给自己划定边界、情愿少做事，也不想犯错。这与我们团队氛围和价值观就严重不符。<br>所以，我们要倡导鼓励大家去犯错、试错；不能怕生产事故影响客户口碑，而畏首畏尾，俗话说你怕什么就回来什么…</p><p>看到本质了，咋办呢？</p><p>今天我大致整理如下思路，供大家讨论：</p><ol><li>按《星云生产事故复盘模板V1.0.0_20210323.doc》复盘；</li><li>提出至少8个具体改进措施；</li><li>保证每个改进措施不会重犯；</li><li>鼓励大家试错和犯错，但是要对客户有敬畏之心；</li><li>生产事故管理领导重视，形式月度、季度数据；</li><li>复盘仪式严肃，不可形于表面；</li><li>措施及时检查和汇报结果；</li></ol><h2 id="生产事故复盘tips"><a href="#生产事故复盘tips" class="headerlink" title="生产事故复盘tips"></a>生产事故复盘tips</h2><ol><li>复盘时间控制在30min以内；</li><li>明确事故责任人，仅1人；</li><li>事故复盘语气肯定，不拖沓；</li><li>复盘会必须要所有的事情明确清楚，不可再次会议确认，要求组织者明确目标；</li><li>事故复盘不是问责讨论会，注意掌控氛围和参会人的言词；</li><li>明确的改进措施，以及明确负责人和时间，制定目标（符合SMART原则）；</li><li>形成文档、数据化；</li></ol>]]></content>
    
    <summary type="html">
    
      公司有个制度：如果出了严重的生产事故，具体责任方(研发)、直属领导、总监连坐罚钱...
    
    </summary>
    
    
      <category term="管理" scheme="https://neilli.cn/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="管理" scheme="https://neilli.cn/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="生产事故" scheme="https://neilli.cn/tags/%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85/"/>
    
  </entry>
  
  <entry>
    <title>10秒加速你的github访问速度</title>
    <link href="https://neilli.cn/2021/03/23/jiasu-github/"/>
    <id>https://neilli.cn/2021/03/23/jiasu-github/</id>
    <published>2021-03-23T03:50:40.000Z</published>
    <updated>2021-03-23T07:14:52.104Z</updated>
    
    <content type="html"><![CDATA[<p>访问国内网站、google秒开，但是访问github经常出现卡顿、龟速，即使开了vpn也不行。急毛的一米。</p><p>看下面你有解药了.</p><h2 id="一、查询-github-DNS"><a href="#一、查询-github-DNS" class="headerlink" title="一、查询 github DNS"></a>一、查询 github DNS</h2><p><a href="http://tool.chinaz.com/dns/?type=1&amp;host=github.com&amp;ip=" target="_blank" rel="noopener">http://tool.chinaz.com/dns/?type=1&amp;host=github.com&amp;ip=</a></p><p><img src="github-js.png" alt></p><h2 id="二、选择就近加速的-DNS"><a href="#二、选择就近加速的-DNS" class="headerlink" title="二、选择就近加速的 DNS"></a>二、选择就近加速的 DNS</h2><p>根据上面查询出 TTL 越小的值，速度越快。</p><h2 id="三、配置-host"><a href="#三、配置-host" class="headerlink" title="三、配置 host"></a>三、配置 host</h2><p><code>sudo vi /etc/hosts</code></p><p>我是mac，win自己想办法。</p><h2 id="四、刷新-DNS"><a href="#四、刷新-DNS" class="headerlink" title="四、刷新 DNS"></a>四、刷新 DNS</h2><p><code>dscacheutil -flushcache</code></p><p>再打开你的 github 秒开…</p>]]></content>
    
    <summary type="html">
    
      访问github经常出现卡顿、龟速，非常着急。咋办？
    
    </summary>
    
    
      <category term="github" scheme="https://neilli.cn/categories/github/"/>
    
    
      <category term="github" scheme="https://neilli.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>如果使团队成为一个成长型的组织?</title>
    <link href="https://neilli.cn/2021/03/11/how-growth/"/>
    <id>https://neilli.cn/2021/03/11/how-growth/</id>
    <published>2021-03-11T11:19:43.000Z</published>
    <updated>2021-03-17T08:59:40.719Z</updated>
    
    <content type="html"><![CDATA[<p>个人是信奉终身成长的职场人。</p><p>带团队时，其实我也一直期望能通过自己和大家的交流、以及其他的身体力行去影响团队成员也要有成长型思维。</p><p>什么是成长型思维呢？</p><p><strong>成长型思维，英文叫做”Growth Mindset“，指的是个人的智力和能力不是一成不变的，而是可以通过努力去获得和提高的，同时生活和学习中遇到的挑战和困难是磨练和锻炼的有效方式。</strong></p><p>所以，如果一个人有这个成长型的认知，越是过早的认知到，对自己的工作和生活的影响越是巨大的。可能大家都会说，咦，我们知道呀，学习吗。不会的学吗？但是，自己细想下，你在学习某个东西的时候，你有多少坚定的意识到这个事情我值得学习且能搞的定，如果这个意思不够，大家基本会半途而废，无法坚持到最后，最终整个学习战线也会拉的很长。</p><p>如果使团队成为一个成长型的组织?</p><p><strong>一个管理者想要获得成功，光是自己成长、进步、很牛逼，是不够的，最重要的时带着团队，大家一起成长。</strong></p><p>之前在<a href="https://www.neilli.cn/2021/03/08/guanli-renzhi/" target="_blank" rel="noopener">工作了那么多年，聊聊对管理者来说必须做的3件事情？</a>中提到过「构建团队」寻找同路人，不仅大家价值观一致，也是寻找有成长型思维或者愿意成长，但是他可能还未意识到这层认知而已。你其实需要这样的一群人。</p><p>如果你团队中有个家里其实不差钱，人家来工作不求有技术上的进步，但求按时按点下班，做完你分配的事情，其他的与世无争。这样的人怎么办？其实，就要看你对团队的定位，如果你的团队是成长型组织，那他不适合。如果你的团队是做稳定且固定的业务，你也能发下他的一些其他优点，并安排到合适的位置上，此人也合适啊。所以，看你的组织的定义，以及你对他优点的发现。</p><p>那作为一个成长型的领导，如何带领大家一起成长呢？（前提他是同路人，你认可他）结合我工作那么多年，总结如下：</p><h2 id="一、发现他的优点"><a href="#一、发现他的优点" class="headerlink" title="一、发现他的优点"></a>一、发现他的优点</h2><p>任何同路人，都有优点。只是，你不了解他而已。</p><p>人性，没人希望天生被人管理、被人改变着超领导自己喜欢的方向发展、成长。所以，你不要试着去改变一个人，你只是去用人。一个人如果你发下他改变了，一定是他意识到他要改变，他才能改变；不是你要改变他，他就会变的。</p><p>之前领导让我们和每个人每月至少聊一次，工作和非工作上都可以，其实，就是去了解和观察每个人，根据他们的兴趣点和特点，慢慢的调整能发挥他优点的任务给他，塑造他的优势。那些他做的可能不太好的，尽量安排同事去协助他，做好补位。</p><p>最重要的，在慢慢调整能体现他优势工作的同时，持续关注他的产出和绩效，如果超出预期，那就要去调整他的目标，让他接受更大的挑战，进一步扩大优势；相反，如果绩效不如人意，那就按<a href="https://www.neilli.cn/2020/08/22/how-to-jixiao/" target="_blank" rel="noopener">如何去和小伙伴谈绩效</a>所提一样，和他一起分析原因，并提示改进方案。</p><h2 id="二、激活他"><a href="#二、激活他" class="headerlink" title="二、激活他"></a>二、激活他</h2><p>在<a href="https://www.neilli.cn/2021/03/08/guanli-renzhi/" target="_blank" rel="noopener">工作了那么多年，聊聊对管理者来说必须做的3件事情？</a>、<a href="https://www.neilli.cn/2020/09/11/guanli-jijixing/" target="_blank" rel="noopener">新人积极性一直能保持？</a> 提到的激活和自驱力，其实是一个意思。上面2篇文章没有提到就是如何让他自己的目标规划和公司的OKR结合起来，其实也是激活他的一个比较重要的方式。如果能做到，那他就会意识到他是在为自己工作，而不是为工作；我经常在公司很晚，但是我从来没有认为自己是在加班或被压榨，因为自己知道自己要什么？ 那如何做呢？</p><ol><li>和他多聊，倾听他的目标和规划；</li><li>站在他的角度思考他的需求，把你的要求、目标转变成他的目标，且你们要认同一致；</li><li>制定目标推进计划；</li></ol><p>所以，我们大家一起是为了一个我们都认可的目标和愿景，在实现此目标的过程中，也能监督各自目标。那大家在工作的热情，肯定是够的，那个人成长肯定也是水到渠成的事情了。</p><h2 id="三、给予他机会"><a href="#三、给予他机会" class="headerlink" title="三、给予他机会"></a>三、给予他机会</h2><p>给予他机会就是给与他挑战的机会，也就是你愿意去培养他，愿意接受他在挑战更高目标的同时带来的试错成本。</p><p>试问，你的领导，如果天天把所有的事情都规划的好好的，每个人只能做一些自己百八年前都能闭着眼睛搞定的事情，不让你负责一些你看似搞不定事情；偶尔犯错了，一顿狂批，你在这样的团队中你乐于待吗？</p><p>团队成员愿意去调整更大目标，本身是积极寻求进步的表现，如果在过程中犯错，身为领导者，你要同他一起去复盘，并寻找出下一步改进优化的措施，形成他下一阶段的目标。</p><h2 id="四、适当的压力"><a href="#四、适当的压力" class="headerlink" title="四、适当的压力"></a>四、适当的压力</h2><p>其实大家都比较懒，人性就是如此。回想自己有时候，偶尔也会懒一段时间。如果此时能有个人，鞭挞自己，其实我还是挺感激他的。但是，没有。</p><p>所以，你负责的这么一个团队，肯定有人在某阶段或相当长的一段时间，比较懒，不想突破自己、不想走出自己舒适区，这时候，领导就要能发起，且起到鞭策的作用，注意力度，不要让大家以为你在管理他，其实，你只是在帮助他，推他一把而已。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>之前可能没有系统的思考如何让团队成为成长型组织，今天深度思考这么多，值得。</p><p>组织，最终是人组成的。你组织的成功，其实是人的成功，是氛围的成功，最终才能体现你领导的成功。即使优秀的人不满足目前整体情况走了，但是氛围如果还在，你的这个组织会正循环。这样你的团队会持续成长，从而体现你的领导水平，相对来说你的管理就会越来越轻松，最终达到管理的终极是不管理（其实很远）。</p>]]></content>
    
    <summary type="html">
    
      最近大领导要我们多多思考管理上面的事情。确实，之前大多时间更多关注的是技术和业务本身，没有更多的去思考，结合工作那么多年待团队的经验，其实还是有很多可以输出的。
    
    </summary>
    
    
      <category term="管理" scheme="https://neilli.cn/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="管理" scheme="https://neilli.cn/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="成长型组织" scheme="https://neilli.cn/tags/%E6%88%90%E9%95%BF%E5%9E%8B%E7%BB%84%E7%BB%87/"/>
    
  </entry>
  
  <entry>
    <title>进步，是永远不变的追求</title>
    <link href="https://neilli.cn/2021/03/10/liucheng-sikao/"/>
    <id>https://neilli.cn/2021/03/10/liucheng-sikao/</id>
    <published>2021-03-10T12:11:50.000Z</published>
    <updated>2021-03-10T13:38:55.676Z</updated>
    
    <content type="html"><![CDATA[<p>你满腔热血的去推进某个事情，最欣慰的是得到周围同事的理解和无条件支持。无论你是否是他们的领导。</p><p>我们知道如果不是直接上下级，我们在工作中推进或打破一个流程，是很费劲的，这个过程中，如果没有一个强大内心，是不足以持续推进的。</p><hr><p>新的流程的调整无疑会对现有的机制有所打破，开始会让大家有所忙碌，但是，忙是一定是一时，因为大家一定有一个要适应的过程。</p><p>大家可以想象下如果流程不调整之前，大家做同样的事情要花多少时间、走多少弯路、费多大劲、最后我们成长了什么、我们又得到了什么？浑浑噩噩、恍恍惚惚的推进着工作，做完就做完了，无任何反馈和收获…</p><p>现在或不久将来，如果我们能花更少的时间，赢得更多领导的认可，是因为我们团队在持续进步，而这进步一定是打破现状的改变，我们并把它坚持下去来赢得的。</p><p>讲到底，这次调整是整个产品研发流程水线的调整，从需求管理、需求评审、研发设计、研发评估、提测、上线等涉及到产品经理、UI、研发、测试等多个职能部门的协调配合，难度是可想而知的。</p><p>试想，如果需求管理不当、开发时间评估过程、未依正确的姿态面对过程中诸多的不确定性因素、项目过程中的管控又不到位，而我们却总想着依靠团队的加班来填补这背后的落差，团队是可以靠一时的热情把这段时间挺过去，但是，时间久了，这部分热情会磨碎殆尽，团队会出现乏力，进而影响其他事情的推进，出现严重的恶性循环，最终坏了整个团队。<strong>身为团队负责人是时刻以团队进步未首要责任，且不可对团队的超时加班而沾沾自喜。团队加班是要有的，但是，要做到有张有弛。</strong></p><p>大将无能，累死三军。</p><hr><p>今日有感。</p>]]></content>
    
    <summary type="html">
    
      不断打破和调整流程，得不到其他职能部门的支持，你如此做到底是为了什么？背后又追求的是什么？
    
    </summary>
    
    
      <category term="管理" scheme="https://neilli.cn/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="管理" scheme="https://neilli.cn/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="流程" scheme="https://neilli.cn/tags/%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>工作了那么多年，聊聊对管理者来说必须做的3件事情？</title>
    <link href="https://neilli.cn/2021/03/08/guanli-renzhi/"/>
    <id>https://neilli.cn/2021/03/08/guanli-renzhi/</id>
    <published>2021-03-08T13:40:40.000Z</published>
    <updated>2021-03-09T13:33:28.605Z</updated>
    
    <content type="html"><![CDATA[<p>试问，如果给你一个团队，每个人都是那种很主动、积极、自驱力很牛逼、技术上P8+的人，那你在此团队中的管理的价值还有多大呢?</p><p>所以，管理的目的就是目前团队中不是人人都P8+，而我们又要去做那种P8+的事情，所以，要用通过管理的手段来向团队要效益。</p><p>有个基本的管理认知：管理是为了少管、不管，是为了将团队中那些自驱力不强的人，变的更加积极、主动。自己也不是个包工头，时刻监督着团队，不会让管理越来越严。</p><p>明白了这一点，其实，很多事情就能想明白。</p><p>就像有人问的：你目前团队最缺什么?</p><p>回答此问题之前，自己要清晰的知道自己的团队是干啥的。也就是自己团队的职能，围绕职能，能清晰的明确团队目标、构建团队、选好实现路径。</p><p>举例，目前负责的公司中台。围绕这个，自己目前最重要要做的3件事情（基本也是大多数团队管理者要做重要的几件事情）：</p><ol><li>构建团队</li><li>加强团队协同</li><li>激活团队活力</li></ol><h2 id="构建团队"><a href="#构建团队" class="headerlink" title="构建团队"></a>构建团队</h2><p>构建团队其实就是在做团队的组织架构，为什么这个很重要的？项目上也参与过、职能部门的产品一条线、研发一条线、测试一条线也干过、面向产品的推进模式也做过，论价值和效率还是产品型组织架构比较靠谱，也基本是公认的。</p><p>所以，在2020.3月，自己得到要做中台的消息时，就把中台团队构建成产品型组织架构，明确产品目标、愿景，人员也往这方面靠近；目前，产品、UI、研发、测试，在中台团队，是严格按产品型流水式推进。</p><p>这么做的目的：</p><ol><li>产品、研发、测试，大家不再单独的是各自职能部门的成员了，而是被赋予了共同的价值观和愿景，战斗力无形当中被提升了；</li><li>不仅仅是产品经理要更精通业务和需求，研发和测试也更深入的了解业务和需求了，不再是产品让我干啥，我就干谁呗；</li><li><p>[目前无]绩效体系统一；</p><ol><li>虽然整体无纳入统一绩效考核体系，但是研发内部在统一迭代或统一模板的所有研发，在统一个考评体系内；便于目标和考评统一；</li></ol></li></ol><h2 id="加强团队协同效率"><a href="#加强团队协同效率" class="headerlink" title="加强团队协同效率"></a>加强团队协同效率</h2><p>公司有一款产品：xx协同</p><p>此产品的价值就是体现在协同上。</p><p>2020.11月出差省台时，和台里讲协同的概念：就是让他们台里原本需要多个人在多个系统中分别处理的工作，尽量能在一个平台中完成，减少多系统间的工作的各种问题，提供工作效率；也让台里使目标和结果更清晰、直观（自己的理解）；</p><p>总之：协同，就是让一群人朝着一个目标狂奔，并妥善解决在奔跑过程中的合作问题。我们中台部门也是在奔跑，我们在奔跑过程中，是通过如下来处理协同问题。</p><ol><li>沟通和需求文档、tapd协同<ol><li>所有信息一律在群里明确；</li><li>遇到变更或修改处理群里明确、文档和tapd另加任务；</li></ol></li><li>文档协同：中台科技 文档库，是产品、研发、UI、测试，公共文档库；</li><li>目标协同：加强目标一致性；聚焦团队目标；团队周目标对齐部门月度目标；部门月度OKR对齐研发中心OKR(试行)；</li><li>持续关注影响团队协同效率的事情和人（每天）；</li><li>持续关注那些只关注自己目标，不注重整体目标的成员；</li><li>对于利于协同效率提升的个人，表扬，直接提高绩效，反之降低绩效；</li><li>打造信任和协同的团队文化，所有会议和分享透明，公开纪要；</li></ol><h2 id="激活团队活力"><a href="#激活团队活力" class="headerlink" title="激活团队活力"></a>激活团队活力</h2><p>这个团队活力，不单单是团队之间的人际关系的融洽；也不单单是团队成员的学习氛围的浓厚，学习氛围好可能使每个成员学习很多东西，进步了很大，这时候如果管理者没有利用好团队中每个人的进步，那他们的学习无疑是拿公司的钱，来成长自己，将来有个更高的工资而已。</p><p>激活团队活力，不是经常请大家团建、王者；也不是给大家更高绩效；更不是经常开会讲些大道理；</p><p>那什么是活力呢? 会议上没有很准确的回答上林总，事后想了想，其实像樊登那次讲课举的例子：建国早期，我们经济不发达、缺衣少食，但是我们挺过去很多天灾人祸，甚至干赢过美国。那时候的中国这个团队，就是有活力的。</p><p>所以，活力首先是大家要充分认可我们的目标和愿景，我们像创业团队的创始人一样，大家是一路人。</p><p>其次，在团队中，能体系我们的价值，能清楚的知道如果我们努力了就一定能有好的收获。</p><p>所以，如果想要一个活力四射的团队，星云接下来通过如下来做：</p><ol><li>中台目标和愿景，持续宣讲，赋予团队使命。让团队做到目标统一、清晰。哪怕讲是洗脑也好。至少管理者肯定是信的，再去影响他人；</li><li>寻找同路人，找到那种同志的感觉。就像创业一样那种；如果感觉不是同路人怎么办?直接开掉。</li><li>公平、公开的绩效考评，让大家知道领导赏罚分明，而不是雨露均沾，做的好只赏一点点，拉不开差距；</li><li>打造信任的团队文化，发现大家的优点；</li><li>人文关怀；领导既要铁面无情、也要菩萨心肠。人都是需要认可和关怀的，领导要善于从工作的细节当中察觉团队成员的工作状态，适当的给予关怀；</li></ol><p>总结：上面3个都做完了，接下来最最重要的事情就是带着这么一个你认为调整到位的团队去打仗，用领导的话说就是攻山头，战友情是最浓厚的，也是最持久的，更是维系同路人最重要的粘合剂。在很多时候，一场胜仗，比管理更有用。</p>]]></content>
    
    <summary type="html">
    
      每个人都有过这么一段经历：被公司安排接手新团队或新产品线，团队也是新的，此时在管理上如何进行下手呢（空降没有过）。。
    
    </summary>
    
    
      <category term="管理" scheme="https://neilli.cn/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="管理" scheme="https://neilli.cn/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="认知" scheme="https://neilli.cn/tags/%E8%AE%A4%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>brew更换成中科大源</title>
    <link href="https://neilli.cn/2021/03/04/brew-change/"/>
    <id>https://neilli.cn/2021/03/04/brew-change/</id>
    <published>2021-03-04T00:28:00.000Z</published>
    <updated>2021-03-04T08:05:15.829Z</updated>
    
    <content type="html"><![CDATA[<p>// 替换brew.git:<br><code>cd &quot;$(brew --repo)&quot;</code><br><code>git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</code></p><p>// 替换homebrew-core.git:<br><code>cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</code><br><code>git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</code></p><p>// 替换homebrew-cask.git:<br><code>cd &quot;$(brew --repo)&quot;/Library/Taps/homebrew/homebrew-cask</code><br><code>git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</code></p><p>// 最后<br><code>brew update -verbose</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;// 替换brew.git:&lt;br&gt;&lt;code&gt;cd &amp;quot;$(brew --repo)&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;code&gt;git remote set-url origin https://mirrors.ustc.edu.cn/brew.git&lt;/cod
      
    
    </summary>
    
    
      <category term="brew" scheme="https://neilli.cn/categories/brew/"/>
    
    
      <category term="brew" scheme="https://neilli.cn/tags/brew/"/>
    
      <category term="中科大" scheme="https://neilli.cn/tags/%E4%B8%AD%E7%A7%91%E5%A4%A7/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序(3)-WXS语言特性</title>
    <link href="https://neilli.cn/2020/09/29/weapp-wxml-3/"/>
    <id>https://neilli.cn/2020/09/29/weapp-wxml-3/</id>
    <published>2020-09-29T14:18:41.000Z</published>
    <updated>2020-10-14T01:23:37.956Z</updated>
    
    <content type="html"><![CDATA[<p>wxs 是weixin script。</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>模块</li><li>变量</li><li>注释</li><li>运算符</li><li>语句</li><li>数据类型</li><li>基础类库</li></ul>]]></content>
    
    <summary type="html">
    
      小程序学习笔记。
    
    </summary>
    
    
      <category term="小程序" scheme="https://neilli.cn/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://neilli.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序(2)-WXSS语言特性</title>
    <link href="https://neilli.cn/2020/09/29/weapp-wxml-2/"/>
    <id>https://neilli.cn/2020/09/29/weapp-wxml-2/</id>
    <published>2020-09-29T13:41:55.000Z</published>
    <updated>2020-10-13T11:58:29.565Z</updated>
    
    <content type="html"><![CDATA[<p>wxss 是微信样式语言，用来描述wxml的样式的。和css概念类似。</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>rpx</li><li>样式导入</li><li>内联样式</li><li>选择器</li></ul><h2 id="样式导入、内联样式"><a href="#样式导入、内联样式" class="headerlink" title="样式导入、内联样式"></a>样式导入、内联样式</h2><p>@import 不同页面有相关的样式，就可以用到此场景。外联样式。</p><p>内联样式 -&gt; style.</p><p>总结：动态样式写入style,静态写入class。</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>.class<br><code>#id</code><br>element<br>element,element<br>::after<br>::before</p><p>简单定义：<code>用于选择你想要的元素的样式的一个模式</code>。</p><p>选择器优先级：</p><ul><li>!important 无穷大</li><li>style      1000</li><li>#element   100</li><li>.element   10</li><li>element    1</li></ul>]]></content>
    
    <summary type="html">
    
      小程序学习笔记。
    
    </summary>
    
    
      <category term="小程序" scheme="https://neilli.cn/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://neilli.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序(1)-WXML语言特性</title>
    <link href="https://neilli.cn/2020/09/29/weapp-wxml-1/"/>
    <id>https://neilli.cn/2020/09/29/weapp-wxml-1/</id>
    <published>2020-09-29T12:50:40.000Z</published>
    <updated>2020-10-14T08:13:13.958Z</updated>
    
    <content type="html"><![CDATA[<p>WXML 具体是啥就不说了哎。自己脑补吧，直奔主题。</p><h1 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h1><ul><li>数据绑定</li><li>列表渲染</li><li>条件渲染</li><li>模板引用</li></ul><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>Hello World 例子，源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;container&quot;&gt;</span><br><span class="line">  &lt;view class=&quot;userinfo&quot;&gt;</span><br><span class="line">    &lt;button wx:if=&quot;&#123;&#123;!hasUserInfo &amp;&amp; canIUse&#125;&#125;&quot; open-type=&quot;getUserInfo&quot; bindgetuserinfo=&quot;getUserInfo&quot;&gt; 获取头像昵称 &lt;/button&gt;</span><br><span class="line">    &lt;block wx:else&gt;</span><br><span class="line">      &lt;image bindtap=&quot;bindViewTap&quot; class=&quot;userinfo-avatar&quot; src=&quot;&#123;&#123;userInfo.avatarUrl&#125;&#125;&quot; mode=&quot;cover&quot;&gt;&lt;/image&gt;</span><br><span class="line">      &lt;text class=&quot;userinfo-nickname&quot;&gt;&#123;&#123;userInfo.nickName&#125;&#125;&lt;/text&gt;</span><br><span class="line">    &lt;/block&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=&quot;usermotto&quot;&gt;</span><br><span class="line">    &lt;text class=&quot;user-motto&quot;&gt;&#123;&#123;motto&#125;&#125;&lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    motto: &apos;Hello World&apos;,</span><br><span class="line">    userInfo: &#123;&#125;,</span><br><span class="line">    hasUserInfo: false,</span><br><span class="line">    canIUse: wx.canIUse(&apos;button.open-type.getUserInfo&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中<code>&lt;text class=&quot;user-motto&quot;&gt;&lt;/text&gt;</code> 就是数据绑定。 是叫<code>mustache</code>语法，，具体数据在js的data内容里面。</p><p>注意所有的组件都是小写。 weapp是大小写敏感的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// WXML</span><br><span class="line">&lt;view hidden=&quot;&#123;&#123; flag ? true : false &#125;&#125;&quot;&gt;</span><br><span class="line">hidden</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line">data:&#123;</span><br><span class="line">   flag: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wxml 还能做运算符。</p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//WXML</span><br><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;block wx:for=&quot;&#123;&#123;items&#125;&#125;&quot; wx:for-item=&quot;item&quot; wx:key=&quot;index&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;view&gt;&#123;&#123;item.index&#125;&#125;:&#123;&#123;item.name&#125;&#125;&lt;/view&gt;</span><br><span class="line">  &lt;/block&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">//js</span><br><span class="line"></span><br><span class="line">page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">     items:[</span><br><span class="line">      &#123;</span><br><span class="line">        name:&quot;xxx1&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name:&quot;xxx2&quot;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">     ]</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>wx:key的用法需要注意。</p><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>这个简单，就是用wx:if,wx:elif wx:else</p><p>不做总结了。</p><p>wx:if 会有销毁视图的过程。有更高的切换消耗。hidden 是初始化耗费性能。看你选择了吧。</p><h2 id="模板引用"><a href="#模板引用" class="headerlink" title="模板引用"></a>模板引用</h2><p>这个比较高级，也是更常用。</p><p>你在某个地方定义个代码片段，其他地方可以引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// WXML</span><br><span class="line"></span><br><span class="line">&lt;template name=&quot;address&quot;&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">     &lt;view&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/view&gt;</span><br><span class="line">     &lt;view&gt;地址：&#123;&#123;address&#125;&#125;&lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">用到地方</span><br><span class="line"></span><br><span class="line">&lt;template is=&quot;address&quot; data=&#123;&#123;neil&#125;&#125;&gt;&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    neil:&#123;</span><br><span class="line">      name: &quot;neilli&quot;,</span><br><span class="line">      address: &quot;南京雨花台区&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>文件引用：<br>import 用法很特殊，建议你自己写个demo玩下。</p><p>import 只能把目标文件引入进来，你的wxml只能引用其template模板。其他的不起作用。import有作用域的概念，如你的模板有嵌套引用，是没有用的。这样能避免是死循环。这个是小程序设计的亮点。</p><p>include 是把目标wxml引入，不会关系你的template.</p><p>注意他们2个不同玩法。</p>]]></content>
    
    <summary type="html">
    
      小程序学习笔记。
    
    </summary>
    
    
      <category term="小程序" scheme="https://neilli.cn/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="https://neilli.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>团队管理-你团队有核心人才吗？</title>
    <link href="https://neilli.cn/2020/09/28/guanli-how-to-corer/"/>
    <id>https://neilli.cn/2020/09/28/guanli-how-to-corer/</id>
    <published>2020-09-28T12:42:40.000Z</published>
    <updated>2021-03-19T01:16:48.779Z</updated>
    
    <content type="html"><![CDATA[<p>其实不是小伙伴说，他想成为核心。核心其实就在哪里，如果管理者不重视，那就会造成人才浪费，其长期得不到重视，或者得不到更好的成长，时间久了，他就会离开团队。</p><p>那如何物色出你团队中哪些人是核心？或有核心的潜质，以及你如何去培养他们呢？这个问题，之前还真的没有很重视过，直到这个小伙伴说了，我才深入思考这个问题。记录下。</p><h2 id="一、高度符合团队建设"><a href="#一、高度符合团队建设" class="headerlink" title="一、高度符合团队建设"></a>一、高度符合团队建设</h2><ol><li>能力</li></ol><p>在中台当前建设过程中，个人能力必须和当前业务想匹配。目前公司中台正在建设阶段，肯定要去质量和效率都要高。那在此时哪些高质量、高效率完成事项的人，就是核心人员首先。</p><ol start="2"><li>协同</li></ol><p>团队的协作协同意识是选择核心的一个必要的重点考察对象。如果一个人他做事经常只是关注自己的一亩三分地，你和他交流工作的时候，经过回答这个xx的事情；我这边搞好了，他那块不知道咋回事；他那边我不了解，无法提供帮助；等等类似的言语，不能说此人差，但，协作意识肯定差。当你团队在奋力去协同冲刺是，他肯定会拉你后腿。<strong>往往干更大的事情时，就是考验团队的协同能力。</strong> 所以，如果此人是协同能力有问题，那你是要好好考虑是否把他加入核心了。</p><ol start="3"><li>团队文化</li></ol><p>这一点，其实就是选择团队的同路人，选择那些行事风格和价值观与团队相类似的人。比如，我目前比较倾向于把团队打造出<strong>协同、自驱的成长型团队</strong>。如果一个能力很强，但是，积极主动、不愿意与他人配合人，就不能进入你团队，也一定不能把他发展成核心。</p><p>所以，什么样的人是高潜力人、什么样的人是可培养性强的人？其实，是一个团队领导的意志、理念和认知的延伸。一个领导想要一个什么样的团队，往往就会往这方面去倾斜，如果自己团队的人和你自己的理念有偏差，这就是不是一个好的团队。由此可见，这是一个主观选择题。</p><h2 id="二、某一方面能独立担当的人"><a href="#二、某一方面能独立担当的人" class="headerlink" title="二、某一方面能独立担当的人"></a>二、某一方面能独立担当的人</h2><p>如今互联网发展如此飞快，任何人想要全栈都是很难的，比较那么多技术语言和领域，不是每个人都有那么多精力和时间去学习的，即使学习了，深入性也是问题。所以，作为一个领导必须学会借力，也就是有些你不擅长的领域，有些能协助你完成，与你做到互补，并且能持续对你提供帮助。</p><p><strong>一个好的团队一定是一群能力互补，又有相同价值观的人。</strong></p><p>仔细想想，每个人对物色自己团队核心人员的想法各有不同，仁者见仁，核心是一个，你乐意与他一起工作。</p><p><strong>人是选好了，如何培养这些人呢？</strong></p><h2 id="一、符合个人的IDP"><a href="#一、符合个人的IDP" class="headerlink" title="一、符合个人的IDP"></a>一、符合个人的IDP</h2><p>IDP 即个人发展计划。团队中每个人必须有明确的IDP，必须交到领导这边监督。如果一个人不愿意或者不清晰，又不愿意去做，那这个人不适合你团队，因为你要做的成长型组织。那这个人可能没有成长型思维，或者是不愿意进步，来混日子的。那留着干嘛呢？（这样本身没有错，谁都有自己的追求，拿多少钱干多少钱活儿；但是不适合你的团队而已。）</p><p>有了IDP，每个月的绩效你和他约定除了业务工作之外，这个月务必要达成哪几件事情，作为成长绩效。业务绩效和成长绩效占比8:2吧，如果这个月业务工作在冲刺，也可以没有成长绩效，前提你们要约定好，达成共识。</p><h2 id="二、给予机会"><a href="#二、给予机会" class="headerlink" title="二、给予机会"></a>二、给予机会</h2><p>如果你要培养以一个人，就去让他犯错、给他机会的犯错。不可否认，人在实战中的成长是最快的，也是最有价值的。那如何做好「给予机会」呢。之前在培训课程中学到的，感觉很实用，总结如下：</p><p>“事前不明确、事中不跟踪、事后准抓瞎” 大致就这个意思，具体我忘记了。所以，我把它也按培训老师说的分为成：事前、事中、事后，3个阶段的跟进。</p><h3 id="事前"><a href="#事前" class="headerlink" title="事前"></a>事前</h3><ol><li>明确目标</li><li>听其思路</li><li>重要约定</li></ol><h3 id="事中"><a href="#事中" class="headerlink" title="事中"></a>事中</h3><ol><li>了解进度</li><li>给予支持</li></ol><h3 id="事后"><a href="#事后" class="headerlink" title="事后"></a>事后</h3><ol><li>评估结果</li><li>发现优点</li><li>及时表扬</li><li>两条改进</li></ol><p>解释如下：</p><ol><li><strong>明确目标：</strong> 你要获得什么？必须和被接受者形成共识，而且是目标，必须符合SMART原则</li><li><strong>听其思路：</strong> 为了达成相应的共识，在安排完工作之后，你可以让他表述下他对待此问题的思路，通过他的理解的你们的目标，提出自己思考，你可以去思考他对目标的理解成功、以及实现的程度，你可以看出他对此事负责是否靠谱，也可以作为你评估风险的一个重要依据。</li><li><strong>重视约定：</strong> 每个人都不喜欢被领导监督去完成事情，那开始的时候，你要和他约定，他可以什么时候反馈进度和风险，而不是你经常去亲口去问。防止理解你对他不信任，既然要培养人家，都不信任人家，反而不好。</li><li><strong>了解进度：</strong> 培训中有个点：越是信任你，越是要检查你。也就是要对目标不能交代完了就做甩手掌柜，要去了解进度，评估风险。因为最终你要对目标负责的。</li><li><strong>给予支持：</strong> 给予帮助，其实是人才培养中很重要的一环。培训中也有讲到教练式的方法，其实，通过教练式的引号和启发，能让他在具体事情中得到收获，对他来说是最深刻的，而不是书面上的例子；比如：和产品经理沟通不到一起去，咋办？你要对于这个给予你的引导，而不是直接告诉他xxx；</li><li><strong>评估结果：</strong> 前面明确的结果，那现在事情做完了，就必须对结果进行评价（价值观：依结果为导向）。评价的时候，心态要open，做到有理有据，切不可把评估结果让他感觉你在鸡蛋里挑骨头，适得其反。为甚这个评估结果很重要呢？试想：你勤勤恳恳做了一个事情，做完了就做完了，领导没说一声，是好呢还是不好呢？好在哪里不好在哪里？你满怀期待，而领导视如无睹。自然会对自己的热情大打折扣啊。</li><li><strong>发现优点：</strong> 我一直认为团队中每个人都是有优点（前提价值观一致）。只是，我们作为管理者是否愿意去发现他的有点去加一利用，然后工作中去发挥其优势，去正向的引导他。所以，在他在负责某个目标完成之后，如果我们能发现及时发现和了解此人，其实是利于我们后面工作的安排，如果做完一个事情，你没有发现他任何优点？要么他真没有，要么是你瞎？</li><li><strong>及时表扬：</strong> 我们不是要做团队文化和氛围吗？正好，如果你发现他某个行为或特质，比较符合你想要构建的团队氛围，应该及时对其表扬，能启到对他的正向激励，也能利于团队氛围的建设，两全其美。</li><li><strong>两条改进：</strong> 只提两条，切不可贪多。试想：他是个新人，可能出现问题比较多，你一下子给他列了20条，对他打击多大啊。而且也不一定能改进完，倒不如，只提2条，并监督这个2条，如果完成非常好。那其有一定的可塑性，后期安排其他目标对其他不足之后再改之也可以啊。</li></ol><h2 id="对于不同的人，用专门的反馈机制"><a href="#对于不同的人，用专门的反馈机制" class="headerlink" title="对于不同的人，用专门的反馈机制"></a>对于不同的人，用专门的反馈机制</h2><p>团队中的人有可能不尽相同，比较有人可能经常和你聊，你对他知悉的较多，有的人可能2周聊不了一次。所以，你要对你想培养的人，建立一种固定的反馈机制，千万不能想起来聊聊、想不起来就不聊了。聊天不是仅仅为了理解他的目标完成情况，也是了解他此人，便于你后台对他进行工作授权和工作安排等；当然也是对他个人的IDP的了解，观察和衡量他的执行情况，也是一种鞭策。</p><p>其实一套走下来，其实不是费很多事情，这些基本可以利用一些碎片化的时间去做，也解决了管理者对时间依赖的问题，也可以让你的团队主动你找你，让他去挤你的时间，当然前提此时间时可以被挤压的。</p><p>好了，关于培养核心大致如此。</p><p>编辑于：2021.03.15 20:50</p>]]></content>
    
    <summary type="html">
    
      今天人事找我说你们团队小伙伴很有想法，想成为核心，提了些建议。那作为领导你是如何筛选和甄别团队的核心人才，并如何对其进行针对性培养呢？
    
    </summary>
    
    
      <category term="管理" scheme="https://neilli.cn/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="管理" scheme="https://neilli.cn/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="人才培养" scheme="https://neilli.cn/tags/%E4%BA%BA%E6%89%8D%E5%9F%B9%E5%85%BB/"/>
    
  </entry>
  
  <entry>
    <title>自我管理-我要开始跑步啦</title>
    <link href="https://neilli.cn/2020/09/20/guanli-ziwo-run/"/>
    <id>https://neilli.cn/2020/09/20/guanli-ziwo-run/</id>
    <published>2020-09-20T12:42:40.000Z</published>
    <updated>2020-09-29T06:58:26.251Z</updated>
    
    <content type="html"><![CDATA[<p>最近这段时间开始跑步。每天晚上跑 20-30min。</p><p>2年前，有段时间给自己定下目标，每天坚持夜跑，跑了一个月，总计 800 分钟左右。中间有段时间没有跑，后来再想跑，就没有动力了。所以，有的时候习惯这个东西真是奇妙。</p><p><code>好的习惯养成不易，但是，废掉一个好习惯或许只要三天。</code></p><p>跑步的其实很多好处，一旦开始其实我挺享受这个跑步的过程的。</p><p>现在住的地方离公司比较近了，晚饭后，基本都会到去公司，有事情没干完的继续做事情。或有时候学习、写写博客总结总结东西，基本从19:30~22:30 有将近3小时的大块属于自己的时间，正是自己学习充电的时候。</p><p>结束了，基本22点或22点半，最晚23点（反正回去睡不着，不是玩手机就是看电影）。此时开始跑步，30min 的跑步时间，也是自己思考的时间，跑步的时候你去想个问题，你会感觉时间过的很快。</p><p>已坚持5天。</p><p>最近跑步的时候在想自己今年的大目标。迟迟定不下来（未能写出来），有些不能量化。希望十一之前能明确。</p>]]></content>
    
    <summary type="html">
    
      曾经看过一本书《如何戒掉坏习惯》，就是讲自律的。也给自己定个目标，自律下吧。
    
    </summary>
    
    
      <category term="管理" scheme="https://neilli.cn/categories/%E7%AE%A1%E7%90%86/"/>
    
      <category term="自律" scheme="https://neilli.cn/categories/%E7%AE%A1%E7%90%86/%E8%87%AA%E5%BE%8B/"/>
    
    
      <category term="管理" scheme="https://neilli.cn/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="自律" scheme="https://neilli.cn/tags/%E8%87%AA%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>团队管理-新人积极性一直能保持？</title>
    <link href="https://neilli.cn/2020/09/11/guanli-jijixing/"/>
    <id>https://neilli.cn/2020/09/11/guanli-jijixing/</id>
    <published>2020-09-11T12:42:40.000Z</published>
    <updated>2021-03-19T01:33:09.828Z</updated>
    
    <content type="html"><![CDATA[<p>团队里面上个月进了2个新人。大家都知道新人往往在试用期或前期的积极性和意愿都是很高的。但是随着时间的流逝，你曾经感觉那个在试用期很棒的小伙子，最近咋变了呢？是不是有如此感觉？没有？好吧。或许你带的人不多，或许你很优秀，你的小伙伴能一直保持很高的积极性。</p><h1 id="生存驱动力"><a href="#生存驱动力" class="headerlink" title="生存驱动力"></a>生存驱动力</h1><p>驱动力，是做某个事情的动力，它能推动着你朝着这件事情的完成节点去做。</p><p>新员工的驱动力开始都来自，他能否在此团队中生存下去。如果一个新人，无法融入团队，没有想融入的意愿，也不怕被淘汰。那他的试用期期间肯定是吊儿郎当，凡事肯定不是最积极的。相反，如果一个新员工想在试用期留下来或试用期后新增能有所增加，那他这段时间肯定非常非常认真和努力。</p><p>这段时间他的驱动力就来自<code>生存驱动力</code>。</p><p>但是这个驱动力不是一直都有的，一旦他融入团队，转正后，慢慢的对团队的人相对很熟悉了，所谓的生存驱动力也就慢慢了。因为此时团队融入了，他会感觉和大家一样了。这也是融入的结果。是好事。</p><p>那就要进去下个阶段的驱动力 - <code>激励驱动力</code>。</p><h1 id="激励驱动力"><a href="#激励驱动力" class="headerlink" title="激励驱动力"></a>激励驱动力</h1><p>这个驱动力分2种，物质和精神。</p><p>很幸运，我们公司目前有绩效奖励，271制，2的的话有每月有：<code>月工资*10%*个人绩效*部门绩效</code></p><p>而这部分绩效如果运用合理就能转换成激励驱动力。可能大家感觉平常大家都很努力，要不要无所谓，如果有更好。所以，如果这个时候，你团队中的小伙伴大部分都是那种很积极，对绩效的分配，更是体现领导的能力，分配的好，让大家都无怨言。</p><p>每个季度奖金大家公开，拿到的自然开心。如果没拿到的，要做绩效面谈（<a href="https://www.neilli.cn/2020/08/22/how-to-jixiao/" target="_blank" rel="noopener">如何做绩效面谈</a>），把物质激励转换成精神激励。</p><p>精神激励，可以是在绩效面谈的时候去做，也可以是是平常工作当中，对小伙伴的事情进行表扬。</p><ol><li>针对具体事情；</li><li>公开；</li><li>及时；</li></ol><h1 id="自驱力"><a href="#自驱力" class="headerlink" title="自驱力"></a>自驱力</h1><p>上面2个驱动力，都可以认为是外部驱动，外部驱动有局限。最最吊的时这个小伙伴有自驱力。如果1个有自驱力的小伙伴 + 和公司相符的价值观，那基本这个小伙子会很稳定，也很靠谱，更会成为公司的骨干、核心，甚至领导，最大比如CTO（哈哈，就是我领导）。哈哈，当然，我也是这样的人。自驱力肯定够，价值观也符合。</p><p>之前领导力培训的时候不明白什么是自驱力。回想下自己，自己有这玩意，但是自己是从何时开始从一个毕业不久的小伙子，慢慢的变成一个自我驱动的人才的呢。讲真的，不去培训，你还还真没意识去思考这个问题。后面自己想明白了。下面我就从我自身的角度总结下这个自驱力。</p><p>明白人都能看出，前面2个驱动力比如生存驱动力和激励驱动力，这都是外部驱动，不长久。还有的小伙伴不差钱（团队中有人住着600w的房子，家里还有好几套），你每个月奖励他1000多块钱，让他… 不大可能。所以，让小伙伴时刻保持高意愿和高积极性，只剩下一个方法了，那就是帮助他找到他自己的驱动力。</p><p>对，你没看错。</p><p>自驱力，本来大家都有。只是有的很自律，自己慢慢的就能发掘出。有的人不自律，需要领导协助去发掘。我就是那种自己发掘的。哈哈哈</p><h2 id="一、给多自主性"><a href="#一、给多自主性" class="headerlink" title="一、给多自主性"></a>一、给多自主性</h2><p>回想自己在公司这么多年，我自己的工作，大多是都是自己分配自己。自己有更多的自主性。自己对自己目标负责。所以，如果你团队有小伙伴有能力自主确定目标（包括时间和进度），尽量在保证团队目标的前提下尊重他的意见。这样他在自己工作内容的自主性多了，自己主人翁意识也会高，能起到很强的继发性。</p><h2 id="二、提升小伙伴的专注度，持续成长"><a href="#二、提升小伙伴的专注度，持续成长" class="headerlink" title="二、提升小伙伴的专注度，持续成长"></a>二、提升小伙伴的专注度，持续成长</h2><p>很意外，这个也是手段？真的，如果员工这期间没有进步、原地踏步。他不会有很强的驱动力的。而提升小伙伴的专注度，不是让他专注，而是为其专注提供条件和环境。让他能自主的专注。那这个条件和环境该如何做的呢？</p><h3 id="目标明确"><a href="#目标明确" class="headerlink" title="目标明确"></a>目标明确</h3><p>如果每周能给出小伙伴很明确的目标，他的专注度肯定非常高。什么叫明确呢。明确就是你们双方对结果都无异议。</p><h3 id="略有挑战"><a href="#略有挑战" class="headerlink" title="略有挑战"></a>略有挑战</h3><p>如果一直做他能很简单完成的，时间久了，他也感觉没意思。让他的目标略有挑战，不时来点很有挑战的，然后为其提供分享和表达自己的机会和场所。</p><h3 id="发挥优势"><a href="#发挥优势" class="headerlink" title="发挥优势"></a>发挥优势</h3><p>如果小伙伴来团队的时候，你能发掘他在某个地方有很强优势，如果这个优势有很明显，那在平常工作中如果他能经常兼顾他的优势，自己的成就感也会很爆棚。比如，有的小伙伴专业能力很好，那就让他从事此专业相关的事情；有的小伙伴跨团队协调能力很不错，那有的事情有跨团队协作的就可以分配他；作为leader要善于发现团队成员的优势。所以，就需要leader经常和小伙伴去聊天。</p><p>这些够了吗？ 远远不够。</p><p>之前有一篇文章提到（<a href="https://www.neilli.cn/2020/08/27/what-doing-as-m/" target="_blank" rel="noopener">我平时干些啥</a>）愿景和使命，马云说的：<code>如果一个企业或组织没有文化、愿景和使命，任何结合都是乌合之众</code>。 可能大家都会说，哎呦，那么高级，还愿景。你以为你是BAT。好吧。我们不是。</p><p>很幸运，我们现在负责公司的中台建设，是CTO亲自挂帅督战，收关注度空前的高。那我们团队非常简单基于此去设立目标和愿景。让小伙伴明确他做的工作的意义，更能激发他的主动性和驱动力。</p><p>试问，如果有这样一个团队：团队氛围好，大家关心融洽，小伙伴都有良好的自驱力，自己负责的工作和产品有很重要意义和使命。那么你觉得这个团队或这个公司咋样呢？</p><p>哈哈哈，当然，工资也得可以~</p>]]></content>
    
    <summary type="html">
    
      管理的培训课，之前参加过不少，开始学习后感觉很是受用，最近基于目前团队情况在做下阶段性总结吧。
    
    </summary>
    
    
      <category term="管理" scheme="https://neilli.cn/categories/%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="管理" scheme="https://neilli.cn/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="意愿" scheme="https://neilli.cn/tags/%E6%84%8F%E6%84%BF/"/>
    
  </entry>
  
  <entry>
    <title>架构 - 分布式消息队列（一）</title>
    <link href="https://neilli.cn/2020/09/07/architect-queue1/"/>
    <id>https://neilli.cn/2020/09/07/architect-queue1/</id>
    <published>2020-09-06T16:11:21.000Z</published>
    <updated>2020-09-27T13:56:19.196Z</updated>
    
    <content type="html"><![CDATA[<p>消息队列的作用我们大家都知道，本文主要从整体上学习下消息队列的同步与异步、以及异步架构及其反模式、异步架构有哪些好处、挑战和问题等。</p><h2 id="统一日志服务设计"><a href="#统一日志服务设计" class="headerlink" title="统一日志服务设计"></a>统一日志服务设计</h2><p>我们中台搞到现在不得不上消息队列，目前场景是用到统一日志中心处。</p><p><img src="queue1-1.png" alt></p><p>统一日志中心作为中台的基础服务，承担着所有业务服务的系统日志、业务日志的收集和输出、检索功能。便于开发者利用此服务迅速定位自己服务的问题，而不用一有问题就去找运维、或进生产环境查看日志，况且目前环境是 docker + k8s 更不利于普通开发者去查看和定位。</p><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>同步模式，是请求调用发起之后，会一直阻塞直到调用方把请求处理完成。</p><p><img src="queue1-2.png" alt></p><p>服务A发起了发送短信的调用之后，就一直阻塞，等待调用方相应。</p><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>异步就是调用方发起请求之后，直接得到请求发送成功之后，剩下的就不管了。然后调用方就可以去干其他事情。好像 多线程 类似。</p><p><img src="queue1-3.png" alt></p><h2 id="消息队列异步架构"><a href="#消息队列异步架构" class="headerlink" title="消息队列异步架构"></a>消息队列异步架构</h2><p>生产者生产消息加入到消息队列，消费者生产消息，基于消息体去做相应的业务操作。这本身相对于生产来说就是异步的。生产者生产了消息之后就直接可以不用等待处理结果，就可以去做其他事情，本身就是异步。</p><p>所以，会有3个角色：生产者、消费者、消息队列</p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>生产者，顾名思义就是生产消息的。它的职责很简单，就是构建1个合法的消息，然后把消息加入到队列中。应用开发者来觉定何时何地构建消息。</p><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>消费者，就是消费消息的，并根据消息体来做不同的业务。它与生产者隔离，可以在不同的服务器，也相互不依赖，并能通过服务器扩容来实现消费速度的增加。</p><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>消息队列就是生产者生产消息存放的地方，也是消费者取消息的地方，通常其性能很高，所以能给消费者充当缓存作用。其实现可以有很多，比如：共享文件、数据库和NoSQL，以及分布式消息队列服务器。</p><p>常用的消息队列产品有：Kafka、RabbitMQ、ActiveMQ、RecketMQ。</p><h2 id="消息队列模式"><a href="#消息队列模式" class="headerlink" title="消息队列模式"></a>消息队列模式</h2><h3 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h3><p>生产者构建消息添加到消息队列中，消息队列中的另一端是多个消费者，当消息达到队列中时，消费者通过竞争获取消费某个消息的权利，那次消息就会被路由到此消息队列消费（且只会路由到1个消费者）。所以，点对点模式的消息只会被1个消费者消费，而消费者消费的消息也只是消息队列中一部分（取决于消费者数量）。</p><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>与点对点模式相反，该模式下的消息是可以被多个消费者消费。生产者构建的消息发送到某个主题(topic)下（而不是队列），当消息到达某个主题下后就会被克隆给每个订阅此主题的消费者，每个消费者接受一份消息复制到自己私有队列。</p><p>两种模式各有各的使用场景。比如上面 UML 图中，在点对点模式下，生产消息扔进队列之后，生产者就可以不用管它了，而消费者也不用管是谁生产的，接受到之后就直接调用短信服务发送即可。一个短信消息只能被发送1个次，所以这个场景下适合使用点对点。</p><p>发布订阅模式，比如，当新用户注册成功这个场景，加入生产者是用户服务，在注册成功构建一个用户注册的消息，发布到用户注册的topic下，现在新增1个消费者：发送邮件激活消费者订阅、同步用户到另外1个服务消费者等。加入此时就2组消费者订阅了这个topic，那他们分别会接受到此消息，然后该发邮件的发邮件、该同步用户的同步用户，各司其职。</p><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ol><li>异步</li><li>削峰</li><li>易扩容</li><li>解耦</li></ol><p>异步和削峰这个大家很熟悉，易扩容什么鬼？前面无论是点对点还是发布订阅模式，当消息队列中的消息过多，我们都可以很方便的增加物理机器来部署消费者，来达到10倍或几十倍的消息消费能力，从而提高消息的消费速度。因为生产者和消费者是独立的，相互不影响。这也是消息队列为何能解耦的原因。</p><h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><p>前面说了那么多消息队列的好处，什么解耦、削峰啥的，这玩意那么好，是不是每个系统都应有去用的呢。其实不然，任何事物都有2面性，有好的一面，比如是有一面是代价。</p><p>分布式的复杂度是传统单体系统不能比的，还是消息队列的消息是无序的，所以消费者消费的时候不能指定谁先谁后，消息重入、丢失等。</p><p>消息无序其实是指入消息队列时能指定顺序，但是消费的时候是不能明确指定顺序。</p><p>消息重入会造成重复消费的风险，比如消息有个失败机制，当消费失败消息会被重新加入队列，但此时其实是消费成功了，一旦加入队列中，那消费者就会消费他，如果此消息不是幂等的，就会造成重复消费问题，比如发送短信，会被发送多次，或发放积分等。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>消息队列在微服务架构中是必不可少的，那么个相互独立服务，服务之间解耦是肯定要用到的。其本身的异步架构能给我们在微服务架构上带来很多好处。</p>]]></content>
    
    <summary type="html">
    
      高并发架构设计中，肯定必不可少的要有消息队列吧。而对于整个公司做为 PaaS 层的能力组件，分布式消息队列肯定是不二选择了吧。故，总结下目前我们中台架构的分布式消息队列的设计。
    
    </summary>
    
    
      <category term="架构" scheme="https://neilli.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://neilli.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="消息队列" scheme="https://neilli.cn/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>架构 - 分布式缓存（三）</title>
    <link href="https://neilli.cn/2020/09/03/architect-cache3/"/>
    <id>https://neilli.cn/2020/09/03/architect-cache3/</id>
    <published>2020-09-03T12:19:31.000Z</published>
    <updated>2020-09-16T09:36:42.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h2><p>顾名思义，分布式缓存和普通的缓存的区别就是在于，分布式缓存是通过多台缓存服务器以集群的形式对外提供缓存服务。</p><p>所以，分布式缓存的问题就在于我们有多台缓存服务器，当我们存了某个缓存在其中一台服务器，那当我们想获取的时候如何准确快速的找到这台服务器呢？</p><h2 id="余数算法"><a href="#余数算法" class="headerlink" title="余数算法"></a>余数算法</h2><p>假如缓存服务器搞3台，我们还是一样的存储 key, value，我们需要先把 key hashcode 之后，然后对 3 取模，定位出存储在哪台服务器。这样的足够简单，但是，不利于后期扩容。试想下，如果每台服务器已经存储了 100w 个 key，需要在扩容一台， 此时当需要获取缓存的 value 时，需要把 key 的 hashcode 对 4 取模去定位服务器，这无疑是灾难的。因为这样就找不到之前存储的服务器了。</p><h2 id="一致性哈希算法"><a href="#一致性哈希算法" class="headerlink" title="一致性哈希算法"></a>一致性哈希算法</h2><p>为了解决上面问题，我们采用一致性哈希算法。一致性哈希算法其实就是先构建一个哈希环，然后把服务器hashcode之后放到环上，存取的时候也是先把key hashcode之后放到环上。然后沿着顺时针找到key离得最近的那个服务器就是其所存储的服务器。</p><p>所以，这个算法有个天然的弊端，因为hash是随机的，所以，落到环上也是随机的，就有可能造成有的服务器存的多，有的少，造成不均。而后面扩容也是如此，如果扩容的服务器落到的那个存储量大的服务器那边，也可能会造成类似余数哈希一样的雪崩。</p><p>面对上面问题，业内比较通用的方式是使用虚拟节点。这个自己去学习吧。不讲了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本系列讲了缓存是我们常用的，且更容易提高性能的一个手段。要了解其分类；通读缓存和旁路缓存；哪些场景下适合用缓存、哪些场景下不适合用；以及其场景问题；最后，我们了解下分布式系统中常用的分布式缓存，并了解了2个常用的缓存路由算法，建议使用一致性哈希算法。</p>]]></content>
    
    <summary type="html">
    
      什么是分部署缓存？和我们之前用的单机或哨兵模式有啥区别？主要针对哪些应用场景呢？。
    
    </summary>
    
    
      <category term="架构" scheme="https://neilli.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://neilli.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="缓存" scheme="https://neilli.cn/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>架构 - 分布式缓存（二）</title>
    <link href="https://neilli.cn/2020/08/30/architect-cache2/"/>
    <id>https://neilli.cn/2020/08/30/architect-cache2/</id>
    <published>2020-08-30T09:19:31.000Z</published>
    <updated>2020-09-15T00:43:08.388Z</updated>
    
    <content type="html"><![CDATA[<p>上节讲了对象缓存的基本概念和知识。当然，业务数据的缓存在整个系统架构中的重要性毋庸置疑，但是像方向代理、CDN 等，在高并发架构中的作用也不可小视，也是必不可少的。</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>讲反向代理之前，小朋友肯定会说<code>正向代理</code>咋不讲呢？ 代理缓存其实就是客户端缓存，一般我们在架构中控制不了。</p><p><img src="daili.png" alt></p><p>如上图，我们访问 Http 时，如果有代理服务器，当前我们之前以及访问过该网页，则从代理服务器之前返回缓存的数据，如果没有，再去请求网络返回数据。更多时候，客户端都不一定知道他被加了代理服务器。</p><p>因为它是客户端缓存，不在缓存架构范围内，不做重点讨论。知道即可。</p><p>反向代理，顾名思义和和之前代理缓存反向的。代理缓存是代理客户上网的，而反向代理则是代理数据中心输出的。反向代理缓存是存储在数据中心的，是数据中心的统一入口。</p><p>刚刚说到反向代理缓存是存储在数据中心的，一般当外部流量访问数据中心时，通常是经过负载均衡到某个反向代理服务器，反向代理服务器在本地查找缓存，如果有则直接返回，不会到后面的应用服务器查询。反向代理缓存还可以以多层形式存在。</p><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><p>CDN 比较特殊，它不像反向代理缓存一样为网络服务商的缓存服务。如阿里云 CDN 缓存服务。</p><p>用户通过网络访问数据时，是通过网络服务商提供的网络链接才能链接到我们数据中心，那此时网络服务商就可以在自己提供的网络服务的机房里提供一次缓存服务。</p><p>比如，用户访问 <code>xingyun.com</code> ，由于第一次访问改服务，则会连接到数据中心返回数据给用户。下次再访问时 CDN 的反向代理缓存去命中一些静态资源，如果未命中则直接去数据中心获取。数据中心返回的数据依然要经过 CDN 服务器，此时它就可以把这些数据缓存起来，供下次访问使用。</p><hr><p>以上，就把代理缓存、反向代理、CDN等大致复习了下。其实还有一种缓存是客户端缓存，叫<code>旁路缓存</code>，那上面的那些就叫<code>通读缓存</code>。按字面意思应该能理解。</p><p>与通读缓存不同，是客户端自己先去旁路缓存查找数据，如果没有，则需要自己去数据中心获取数据，然后再缓存到旁路缓存。</p><h2 id="缓存场景问题"><a href="#缓存场景问题" class="headerlink" title="缓存场景问题"></a>缓存场景问题</h2><ol><li>避免频繁更新的内容用缓存；</li><li>没热点的缓存；</li><li>注意数据不一致性；</li><li>注意雪崩；</li></ol><p>上面学习了那么多，分布式缓存还是没讲到，下个章节我们开始我们的正题。</p>]]></content>
    
    <summary type="html">
    
      本来以为一篇能把缓存讲完，看来要单独讲下外部系统缓存了，也是架构的一部分，特别是高并发情况下。
    
    </summary>
    
    
      <category term="架构" scheme="https://neilli.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://neilli.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="缓存" scheme="https://neilli.cn/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>架构 - 分布式缓存（一）</title>
    <link href="https://neilli.cn/2020/08/29/architect-cache/"/>
    <id>https://neilli.cn/2020/08/29/architect-cache/</id>
    <published>2020-08-29T15:19:31.000Z</published>
    <updated>2020-09-09T06:29:25.660Z</updated>
    
    <content type="html"><![CDATA[<p>缓存，相信每个做过后端的都应该很清楚，它有相对来说技术简单、对性能提升明显的特点广受后端研发和架构师的喜爱。</p><p>但是，不是所有的场景下都适合用缓存，所以，使用缓存的时候要注意以下几点：</p><ol><li>数据频繁修改，不适合用缓存。</li><li>数据无热点性，也就说用的情况不多，命中率低。</li><li>强一致性，不适合用缓存。</li><li>缓存可能会雪崩，从而导致整个系统瘫痪。</li></ol><h2 id="缓存特点"><a href="#缓存特点" class="headerlink" title="缓存特点"></a>缓存特点</h2><ol><li>技术简单</li><li>性能提升明显</li><li>应用广泛</li></ol><p>从计算机、数据库到浏览器我们能看到很多缓存的身影。在外部系统中有：DNS 缓存、浏览器缓存、Http 代理和反向代理、CDN 缓存以及各种对象缓存。所以，本章我们重点要学习的就是对象缓存，常见的有：Redis，Memcached 等。</p><h2 id="缓存为什么那么显著的提升性能呢"><a href="#缓存为什么那么显著的提升性能呢" class="headerlink" title="缓存为什么那么显著的提升性能呢"></a>缓存为什么那么显著的提升性能呢</h2><ol><li>缓存的数据来自于内存，计算机访问内存数据肯定是比磁盘更快的。</li><li>缓存中数据是最终业务需要的数据，不像存储到数据库中的，我们业务需要的时候还要捞出来处理一遍。</li><li>从缓存获取数据，降低了磁盘和网络负载和延迟。</li></ol><h2 id="Hash-表"><a href="#Hash-表" class="headerlink" title="Hash 表"></a>Hash 表</h2><p>缓存的数据结构主要是 Hash 表，这个和 HashMap 和 HashTable 一样，都是基于 Hash 表实现的。</p><p>什么是 Hash 表？</p><p>它其实是一个数组结构，也就说它需要的存储空间是必须连续的。这样就会有个风险，如果你的连续内存不够多，而你存储一个比较大的数据，此时可能会内存溢出。比如：即使你的内存还剩下 512M ，你存储 1 个 400M 的数据，你认为够了，但还是报 OOM 了，原因就在于此。</p><h2 id="往缓存加数据"><a href="#往缓存加数据" class="headerlink" title="往缓存加数据"></a>往缓存加数据</h2><p>比如，需要加一个 ”name”: “neil” 的数据，具体流程如下：</p><p><img src="setcache.png" alt></p><h2 id="从缓存获取数据"><a href="#从缓存获取数据" class="headerlink" title="从缓存获取数据"></a>从缓存获取数据</h2><p>如果要从缓存中获取数据，比如 cache.getValue(‘name’)，其流程和上面类型。</p><ol><li>先获取 key 的 hashcode。</li><li>hashcode 对数组长度取模。</li><li>然去对应数组 index 去找 value。</li></ol><h2 id="缓存键集合大小"><a href="#缓存键集合大小" class="headerlink" title="缓存键集合大小"></a>缓存键集合大小</h2><p>刚刚我们用具体例子熟悉了写入缓存和获取缓存的流程和机制。我们知道，缓存是通过键来精准匹配数据的。</p><p>再比如，如果我们要缓存整个会员(用户)的数据，那我们的键就是 UserID ,那键集合空间就是我们这个系统所有的会员的全体 ID ，比如我们有 1000w 个会员，那我们就会有 1000w 个键存在缓存键集合中。</p><p>在设计缓存中有个必须注意的点：键越少越好。重点体现在它性能方面。</p><h2 id="缓存内存空间大小"><a href="#缓存内存空间大小" class="headerlink" title="缓存内存空间大小"></a>缓存内存空间大小</h2><p>缓存的数据是存储在内存中，内存空间越大，其缓存对象就会越多。一般我们缓存的大小都不会像硬盘一样搞个几百 G，或几个 T，所以，缓存的使用要有规范，不能什么数据都塞进来。在特定大小的缓存里，如果要缓存新对象，肯定要删除一些老的对象，删除老的对象肯定会影响缓存命中。</p><p>物理缓存空间越大，缓存对象越多，缓存命中越高。</p><h2 id="缓存命中率"><a href="#缓存命中率" class="headerlink" title="缓存命中率"></a>缓存命中率</h2><p>缓存命中率也是经常面试中经常被问到的。我们知道我们使用缓存的场景是读多写少，我们希望通过缓存来实现一次数据库查询写入缓存之后，满足后面多次查询的请求，减少数据库压力，直接从缓存获取数据，提高性能。所以，希望缓存命中率越高越好。</p><p>计算公式：正确缓存查询得到数据次数 / 查询总次数。</p><p>当然，缓存生产时间、上面的说的键集合大小、内存空间都是影响命中率的因素。</p><h2 id="缓存寿命"><a href="#缓存寿命" class="headerlink" title="缓存寿命"></a>缓存寿命</h2><p>缓存的对象的生存时间称为 TTL。刚刚说了缓存的时间、缓存空间越大缓存命中就会越高，但是内存不是足够大，总要有所取舍。</p><p>缓存失效的方式有：实时失效、过期失效、LRU失效。</p><h3 id="实时失效"><a href="#实时失效" class="headerlink" title="实时失效"></a>实时失效</h3><p>当我们缓存了某个数据，比如某个商品信息，此时我们更像商品的价格，此时需要直接删除缓存的数据。当获取这个商品的时候先从缓存获取，返回为空，然后此时从数据库查询获取最新数据，再更新缓存。</p><p>注意，更新数据，直接删除缓存，不可直接更新缓存。</p><h3 id="过期失效"><a href="#过期失效" class="headerlink" title="过期失效"></a>过期失效</h3><p>我们存储数据的时候会设置对象的过期时间，如果到时间之后，对象会自动被删除（其实是缓存有算法轮询删除）。</p><p>注意，此时注意那些过期时间为 <code>-1</code> 的对象。</p><h3 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h3><p>LRU 是最近最久未使用算法。当缓存空间不够，如果要存入新的对象，是需要删除一些对象才可以存储进来新的。此时可以使用 LRU 算法。这个算法，也经常会被面试问到。</p><p>大致实现：一个链表来实现，当访问了某个对象，把对象移到队头。所以，越往队尾就代表越少被访问，删除是则从队尾开始删除。</p><p>今天先从基本概念了解下缓存。下节我们复习下外部系统的缓存，如反向代理之类的。</p>]]></content>
    
    <summary type="html">
    
      缓存，是我们后端用到最多、最频繁、也是相对不那么陌生的一个组件了，在中台架构中缓存是充当什么角色呢？今天晚上整好梳理下。
    
    </summary>
    
    
      <category term="架构" scheme="https://neilli.cn/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://neilli.cn/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="缓存" scheme="https://neilli.cn/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
</feed>
