<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Neil</title>
  
  <subtitle>人生如逆旅，我亦是行人。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.neilli.cn/"/>
  <updated>2019-11-26T07:52:59.707Z</updated>
  <id>http://www.neilli.cn/</id>
  
  <author>
    <name>stream.neil@gmail.com</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>弄懂SpringBoot中过滤器、拦截器、监听器</title>
    <link href="http://www.neilli.cn/2019/11/26/filter-interceptor/"/>
    <id>http://www.neilli.cn/2019/11/26/filter-interceptor/</id>
    <published>2019-11-26T06:33:59.000Z</published>
    <updated>2019-11-26T07:52:59.707Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对开始刚玩SpringBoot的同学来说光这个几个概念就够理解的了~ 更别说其原理、区别以及使用了，我也是在具体用到的时候才发现确实有点绕，在后面开发的时候肯定少不了和其打交道，所以，在此总结下。</p></blockquote><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p><code>监听器 &gt; 过滤器 &gt; 拦截器</code></p><h2 id="如何写一个具体的Demo"><a href="#如何写一个具体的Demo" class="headerlink" title="如何写一个具体的Demo"></a>如何写一个具体的Demo</h2><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p><strong>实现方式：</strong></p><ol><li>[建议]实现<code>HandlerInterceptor</code>接口；</li><li>继承<code>abstract HandlerInterceptorAdapter</code>;</li></ol><p><strong>具体方法(HandlerInterceptor)：</strong></p><ol><li>preHandle()</li><li>postHandle()</li><li>afterCompletion()</li></ol><blockquote><p>按单词意思即可理解其意，preHandle() 返回<code>true</code>才会往下走；</p></blockquote><p><strong>如何用Interceptor来实现部分请求无需登录校验？</strong></p><blockquote><p>用<code>filter</code>可以添加无需登录校验的<code>api</code>，但，我们也可以用<code>Interceptor</code> + <code>注解</code>的形式，来<br>自定义一个<code>@AnonymousAllow</code>的注解，来拦截网络请求，判断其是否需要登录校验，这样做是不是另外一种思路？具体如下：</p></blockquote><h4 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface AnonymousAllow &#123;</span><br><span class="line">    // 接口允许匿名访问</span><br><span class="line">    boolean anonymousAllow() default true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现AuthorizationInterceptor"><a href="#实现AuthorizationInterceptor" class="headerlink" title="实现AuthorizationInterceptor"></a>实现AuthorizationInterceptor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class AuthorizationInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        log.info(&quot;AuthorizationInterceptor preHandle&quot;);</span><br><span class="line">        if (!(handler instanceof HandlerMethod)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">        AnonymousAllow anonymousAllow = handlerMethod.getMethod().getAnnotation(AnonymousAllow.class);</span><br><span class="line">        if (anonymousAllow != null &amp;&amp; anonymousAllow.anonymousAllow()) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String authorization = request.getHeader(AuthConstants.AUTHORIZATION);</span><br><span class="line">        if (StringUtils.isEmpty(authorization)) &#123;</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            log.error(&quot;AuthorizationInterceptor preHandle SC_UNAUTHORIZED: Null&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            JwtUtil.verifyToken(authorization);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;AuthorizationInterceptor preHandle verifyToken Error: &quot; + e.getMessage());</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@AnonymousAllow</span><br><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">public UserResponse login(@Valid @RequestBody LoginForm form) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><blockquote><p>过于简单，暂不提供实现；</p></blockquote><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><blockquote><p>过于简单，暂不提供实现；</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;对开始刚玩SpringBoot的同学来说光这个几个概念就够理解的了~ 更别说其原理、区别以及使用了，我也是在具体用到的时候才发现确实有点绕，在后面开发的时候肯定少不了和其打交道，所以，在此总结下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="微服务" scheme="http://www.neilli.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringBoot" scheme="http://www.neilli.cn/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://www.neilli.cn/tags/SpringCloud/"/>
    
      <category term="Filter" scheme="http://www.neilli.cn/tags/Filter/"/>
    
      <category term="Interceptor" scheme="http://www.neilli.cn/tags/Interceptor/"/>
    
  </entry>
  
  <entry>
    <title>自己的能量场</title>
    <link href="http://www.neilli.cn/2019/11/25/zhixingli-1/"/>
    <id>http://www.neilli.cn/2019/11/25/zhixingli-1/</id>
    <published>2019-11-25T08:51:53.903Z</published>
    <updated>2019-11-25T08:51:53.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自己的能量场"><a href="#自己的能量场" class="headerlink" title="自己的能量场"></a>自己的能量场</h1><p>最近一段时间最深刻的是<code>改变</code>，如何改变?<br>说的太多的：通过学习，不断地去深刻反思、勇敢地去暴露自己问题并去改变它。有时会问自己：『我改变了，有用吗？』答案是：不知道。但是你知道的是：你成长的是你自己。不要在乎其他人的眼光了。但是这样够吗？</p><p>『兵熊熊一个，将熊熊一窝』如果自己不能真实的改变，自己对自己得过且过，自己原地踏步，指望下属来成就自己，这样的荣誉我绝不要。因为，我听过太多的说教：”你要找准你在团队中的定位…”，我自己也是这样去说教自己的团队的。我自认为我是一个比较注重目标执行以及自觉性相对还可以的一个人，自己也认为自己的定位自己也相对清晰，但是恰恰就是这样的一个我，是<code>灯下黑</code>。以现在的心情去回想过去自己的定位，之前的简直就是仅存留在纸上，没能真正印证到自己心里和实际工作中去，只是概念意义，不管你多么努力去学习的很多东西，没有产生结果，或仅仅对你产生了一点结果，但还是改变不了<code>大环境</code></p><p>这几天我在想身处现在职位，我的职责是什么？这个看似很简单的道理，恰恰是我之前没能深刻去反思的一个问题。如果说这一段时间的学习最深刻的有：<code>改变</code>、<code>结果</code>、<code>沟通</code>、<code>100%责任(责任稀释)</code>、<code>执行</code>… 即使这段时间的英才课程宣传的是<code>体验式教学</code>，其实仔细想下，何尝不是另外一种方式来强制灌注你要牢记这些<code>知识点</code>呢。这些都是课程’灌输’给我的，除此之外，我自己在此去感悟到的是什么？</p><p>我想我应该更清晰第明确了自己的目标了。自己要做到时刻保持强大的能量场，时刻对自己高要求，无论是工作和生活如果遇到了困难、挫折和压力应该以此为动力，去借力成长起来，而不是像之前<code>一蹶不振</code>好一阵子，其实你这样的话，你的下属是能看到的。这不是一个优秀领导者所为；</p><p>我想我应该彻底改变了自己的心态了。不再是自我感觉良好，明白自己和优秀的人还是有很大的差距，但是庆幸的是我知道了我和优秀的人有差距；</p><p>还有就是，我应该明白了自己应该要去做什么，要去营造一个怎么样的氛围，也明确了自己的责任。<strong>你的偷懒是对他人的很不负责任</strong>。之前好几个小伙伴的学习结果，由于我的监督力度不够，导致他们学习成功很不理想，对此深感自责。我希望的这样的一氛围不仅仅是自己小团队，之前感觉公司的氛围和文化离我很遥远，其实就在自己周围，自己也要已更大的能量去投入这方面的推进上，因为皮之不存毛将焉附，大环境有问题，小团队氛围再好有毛用！！！所以，当发现什么是对的，什么是错的都要敢于去讲出来，不会在乎在顾及那么多，对自己和他人的都不负责任。</p><p><strong>最重要的是，我清晰的知道对我自己的改变和成长，我应该去做什么、怎么去做，可能很艰难，但是记住自己是有强大能量的，剩下的就去执行吧！！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自己的能量场&quot;&gt;&lt;a href=&quot;#自己的能量场&quot; class=&quot;headerlink&quot; title=&quot;自己的能量场&quot;&gt;&lt;/a&gt;自己的能量场&lt;/h1&gt;&lt;p&gt;最近一段时间最深刻的是&lt;code&gt;改变&lt;/code&gt;，如何改变?&lt;br&gt;说的太多的：通过学习，不断地去深刻反
      
    
    </summary>
    
    
    
      <category term="管理" scheme="http://www.neilli.cn/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="领导力" scheme="http://www.neilli.cn/tags/%E9%A2%86%E5%AF%BC%E5%8A%9B/"/>
    
  </entry>
  
</feed>
